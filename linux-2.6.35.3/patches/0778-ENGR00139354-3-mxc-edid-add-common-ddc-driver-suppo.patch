From f0e0494ea2242015265d8c407b3692ba75ec03d4 Mon Sep 17 00:00:00 2001
From: Jason Chen <b02280@freescale.com>
Date: Thu, 17 Feb 2011 16:04:02 +0800
Subject: [PATCH] ENGR00139354-3 mxc edid: add common ddc driver support

Add common ddc driver support.

Signed-off-by: Jason Chen <b02280@freescale.com>
---
 drivers/video/mxc/Makefile        |    2 +-
 drivers/video/mxc/mxc_edid.c      |  256 ++++++++++++++++++++++++++++++++++++-
 drivers/video/mxc/mxcfb_sii902x.c |   14 ++-
 3 files changed, 264 insertions(+), 8 deletions(-)

diff --git a/drivers/video/mxc/Makefile b/drivers/video/mxc/Makefile
index 4554105..723001a 100644
--- a/drivers/video/mxc/Makefile
+++ b/drivers/video/mxc/Makefile
@@ -1,7 +1,7 @@
-obj-$(CONFIG_FB_MODE_HELPERS)			+= mxc_edid.o
 obj-$(CONFIG_FB_MXC_TVOUT_TVE)             	+= tve.o
 obj-$(CONFIG_FB_MXC_SII902X)                    += mxcfb_sii902x.o
 obj-$(CONFIG_FB_MXC_LDB)			+= ldb.o
+obj-$(CONFIG_FB_MODE_HELPERS)			+= mxc_edid.o
 ifeq ($(CONFIG_ARCH_MX21)$(CONFIG_ARCH_MX27)$(CONFIG_ARCH_MX25),y)
 	obj-$(CONFIG_FB_MXC_TVOUT)              += fs453.o
 	obj-$(CONFIG_FB_MXC_SYNC_PANEL)         += mx2fb.o mxcfb_modedb.o
diff --git a/drivers/video/mxc/mxc_edid.c b/drivers/video/mxc/mxc_edid.c
index 0289c52..7126a7b 100644
--- a/drivers/video/mxc/mxc_edid.c
+++ b/drivers/video/mxc/mxc_edid.c
@@ -18,7 +18,7 @@
 /*!
  * @file mxc_edid.c
  *
- * @brief MXC EDID tools
+ * @brief MXC EDID driver
  *
  * @ingroup Framebuffer
  */
@@ -28,9 +28,32 @@
  */
 #include <linux/i2c.h>
 #include <linux/fb.h>
+#include <linux/console.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/mxcfb.h>
+#include <linux/fsl_devices.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
 #include <mach/mxc_edid.h>
 #include "../edid.h"
 
+struct mxc_ddc_data {
+	struct platform_device *pdev;
+	struct i2c_client *client;
+	struct delayed_work det_work;
+	struct fb_info *fbi;
+	struct mxc_edid_cfg edid_cfg;
+	u8 cable_plugin;
+	u8 edid[256];
+
+	u32 di;
+	void (*init)(void);
+	int (*update)(void);
+} mxc_ddc;
+
+static bool g_enable_ddc;
+
 #undef DEBUG  /* define this for verbose EDID parsing output */
 
 #ifdef DEBUG
@@ -256,12 +279,11 @@ int mxc_edid_parse_ext_blk(unsigned char *edid,
 }
 
 /* make sure edid has 256 bytes*/
-int mxc_edid_read(struct i2c_adapter *adp, unsigned char *edid,
-	struct mxc_edid_cfg *cfg, struct fb_info *fbi)
+int mxc_edid_read(struct i2c_adapter *adp, unsigned short addr,
+	unsigned char *edid, struct mxc_edid_cfg *cfg, struct fb_info *fbi)
 {
 	u8 buf0[2] = {0, 0};
 	int dat = 0;
-	u16 addr = 0x50;
 	struct i2c_msg msg[2] = {
 		{
 		.addr	= addr,
@@ -317,3 +339,229 @@ int mxc_edid_read(struct i2c_adapter *adp, unsigned char *edid,
 
 	return 0;
 }
+EXPORT_SYMBOL(mxc_edid_read);
+
+static ssize_t mxc_ddc_show_state(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	if (mxc_ddc.cable_plugin == 0)
+		strcpy(buf, "plugout\n");
+	else
+		strcpy(buf, "plugin\n");
+
+	return strlen(buf);
+}
+
+static DEVICE_ATTR(cable_state, S_IRUGO, mxc_ddc_show_state, NULL);
+
+static void det_worker(struct work_struct *work)
+{
+	char event_string[16];
+	char *envp[] = { event_string, NULL };
+
+	/* cable connection changes */
+	if (mxc_ddc.update()) {
+		mxc_ddc.cable_plugin = 1;
+		sprintf(event_string, "EVENT=plugin");
+
+		/* make sure fb is powerdown */
+		acquire_console_sem();
+		fb_blank(mxc_ddc.fbi, FB_BLANK_POWERDOWN);
+		release_console_sem();
+
+		if (mxc_edid_read(mxc_ddc.client->adapter, mxc_ddc.client->addr,
+				mxc_ddc.edid, &mxc_ddc.edid_cfg, mxc_ddc.fbi) < 0)
+			dev_err(&mxc_ddc.client->dev,
+					"MXC ddc: read edid fail\n");
+		else {
+			if (mxc_ddc.fbi->monspecs.modedb_len > 0) {
+				int i;
+				const struct fb_videomode *mode;
+				struct fb_videomode m;
+
+				fb_destroy_modelist(&mxc_ddc.fbi->modelist);
+
+				for (i = 0; i < mxc_ddc.fbi->monspecs.modedb_len; i++)
+					fb_add_videomode(&mxc_ddc.fbi->monspecs.modedb[i],
+							&mxc_ddc.fbi->modelist);
+
+				fb_var_to_videomode(&m, &mxc_ddc.fbi->var);
+				mode = fb_find_nearest_mode(&m,
+						&mxc_ddc.fbi->modelist);
+
+				fb_videomode_to_var(&mxc_ddc.fbi->var, mode);
+
+				mxc_ddc.fbi->var.activate |= FB_ACTIVATE_FORCE;
+				acquire_console_sem();
+				mxc_ddc.fbi->flags |= FBINFO_MISC_USEREVENT;
+				fb_set_var(mxc_ddc.fbi, &mxc_ddc.fbi->var);
+				mxc_ddc.fbi->flags &= ~FBINFO_MISC_USEREVENT;
+				release_console_sem();
+			}
+
+			acquire_console_sem();
+			fb_blank(mxc_ddc.fbi, FB_BLANK_UNBLANK);
+			release_console_sem();
+		}
+	} else {
+		mxc_ddc.cable_plugin = 0;
+		sprintf(event_string, "EVENT=plugout");
+		acquire_console_sem();
+		fb_blank(mxc_ddc.fbi, FB_BLANK_POWERDOWN);
+		release_console_sem();
+	}
+
+	kobject_uevent_env(&mxc_ddc.pdev->dev.kobj, KOBJ_CHANGE, envp);
+}
+
+static irqreturn_t mxc_ddc_detect_handler(int irq, void *data)
+{
+	if (mxc_ddc.fbi)
+		schedule_delayed_work(&(mxc_ddc.det_work), msecs_to_jiffies(300));
+	return IRQ_HANDLED;
+}
+
+static int mxc_ddc_fb_event(struct notifier_block *nb, unsigned long val, void *v)
+{
+	struct fb_event *event = v;
+	struct fb_info *fbi = event->info;
+
+	if ((mxc_ddc.di)) {
+		if (strcmp(event->info->fix.id, "DISP3 BG - DI1"))
+			return 0;
+	} else {
+		if (strcmp(event->info->fix.id, "DISP3 BG"))
+			return 0;
+	}
+
+	switch (val) {
+	case FB_EVENT_FB_REGISTERED:
+		if (mxc_ddc.fbi != NULL)
+			break;
+		mxc_ddc.fbi = fbi;
+		break;
+	}
+	return 0;
+}
+
+static struct notifier_block nb = {
+	.notifier_call = mxc_ddc_fb_event,
+};
+
+static int __devinit mxc_ddc_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+{
+	int ret = 0;
+	struct fb_info edid_fbi;
+	struct mxc_ddc_platform_data *plat = client->dev.platform_data;
+
+	if (g_enable_ddc == false)
+		return -EPERM;
+
+	mxc_ddc.client = client;
+	mxc_ddc.di = plat->di;
+	mxc_ddc.init = plat->init;
+	mxc_ddc.update = plat->update;
+
+	if (!mxc_ddc.update)
+		return -EINVAL;
+
+	if (mxc_ddc.init)
+		mxc_ddc.init();
+
+	if (mxc_ddc.update()) {
+		mxc_ddc.cable_plugin = 1;
+		/* try to read edid */
+		if (mxc_edid_read(client->adapter, client->addr,
+					mxc_ddc.edid, &mxc_ddc.edid_cfg, &edid_fbi) < 0)
+			dev_warn(&client->dev, "Can not read edid\n");
+		else
+			mxcfb_register_mode(mxc_ddc.di, edid_fbi.monspecs.modedb,
+					edid_fbi.monspecs.modedb_len, MXC_DISP_DDC_DEV);
+	} else
+		mxc_ddc.cable_plugin = 0;
+
+	if (client->irq) {
+		ret = request_irq(client->irq, mxc_ddc_detect_handler,
+				IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING,
+				"ddc_det", &mxc_ddc);
+		if (ret < 0) {
+			dev_warn(&client->dev,
+				"MXC ddc: cound not request det irq %d\n",
+				client->irq);
+			goto err;
+		} else {
+			INIT_DELAYED_WORK(&(mxc_ddc.det_work), det_worker);
+			ret = device_create_file(&mxc_ddc.pdev->dev, &dev_attr_cable_state);
+			if (ret < 0)
+				dev_warn(&client->dev,
+						"MXC ddc: cound not crate sys node\n");
+		}
+	}
+
+	fb_register_client(&nb);
+
+err:
+	return ret;
+}
+
+static int __devexit mxc_ddc_remove(struct i2c_client *client)
+{
+	fb_unregister_client(&nb);
+	return 0;
+}
+
+static int __init enable_ddc_setup(char *options)
+{
+	g_enable_ddc = true;
+
+	return 1;
+}
+__setup("ddc", enable_ddc_setup);
+
+static const struct i2c_device_id mxc_ddc_id[] = {
+	{ "mxc_ddc", 0 },
+	{},
+};
+MODULE_DEVICE_TABLE(i2c, mxc_ddc_id);
+
+static struct i2c_driver mxc_ddc_i2c_driver = {
+	.driver = {
+		   .name = "mxc_ddc",
+		   },
+	.probe = mxc_ddc_probe,
+	.remove = mxc_ddc_remove,
+	.id_table = mxc_ddc_id,
+};
+
+static int __init mxc_ddc_init(void)
+{
+	int ret;
+
+	memset(&mxc_ddc, 0, sizeof(mxc_ddc));
+
+	mxc_ddc.pdev = platform_device_register_simple("mxc_ddc", 0, NULL, 0);
+	if (IS_ERR(mxc_ddc.pdev)) {
+		printk(KERN_ERR
+				"Unable to register MXC DDC as a platform device\n");
+		ret = PTR_ERR(mxc_ddc.pdev);
+		goto err;
+	}
+
+	return i2c_add_driver(&mxc_ddc_i2c_driver);
+err:
+	return ret;
+}
+
+static void __exit mxc_ddc_exit(void)
+{
+	i2c_del_driver(&mxc_ddc_i2c_driver);
+	platform_device_unregister(mxc_ddc.pdev);
+}
+
+module_init(mxc_ddc_init);
+module_exit(mxc_ddc_exit);
+
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("MXC DDC driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/video/mxc/mxcfb_sii902x.c b/drivers/video/mxc/mxcfb_sii902x.c
index 4082db0..8367f10 100644
--- a/drivers/video/mxc/mxcfb_sii902x.c
+++ b/drivers/video/mxc/mxcfb_sii902x.c
@@ -127,9 +127,11 @@ static void sii902x_setup(struct fb_info *fbi)
 	i2c_smbus_write_byte_data(sii902x.client, 0x27, 0x00);
 }
 
+#ifdef CONFIG_FB_MODE_HELPERS
 static int sii902x_read_edid(struct fb_info *fbi)
 {
 	int old, dat, ret, cnt = 100;
+	unsigned short addr = 0x50;
 
 	old = i2c_smbus_read_byte_data(sii902x.client, 0x1A);
 
@@ -148,8 +150,8 @@ static int sii902x_read_edid(struct fb_info *fbi)
 	i2c_smbus_write_byte_data(sii902x.client, 0x1A, old | 0x06);
 
 	/* edid reading */
-	ret = mxc_edid_read(sii902x.client->adapter, sii902x.edid,
-				&sii902x.edid_cfg, fbi);
+	ret = mxc_edid_read(sii902x.client->adapter, addr,
+				sii902x.edid, &sii902x.edid_cfg, fbi);
 
 	cnt = 100;
 	do {
@@ -166,6 +168,12 @@ done:
 	i2c_smbus_write_byte_data(sii902x.client, 0x1A, old);
 	return ret;
 }
+#else
+static int sii902x_read_edid(struct fb_info *fbi)
+{
+	return -1;
+}
+#endif
 
 static void det_worker(struct work_struct *work)
 {
@@ -328,7 +336,7 @@ static int __devinit sii902x_probe(struct i2c_client *client,
 	if (sii902x.client->irq) {
 		ret = request_irq(sii902x.client->irq, sii902x_detect_handler,
 				IRQF_TRIGGER_FALLING,
-				"sII902x_det", &sii902x.client->dev);
+				"SII902x_det", &sii902x);
 		if (ret < 0)
 			dev_warn(&sii902x.client->dev,
 				"Sii902x: cound not request det irq %d\n",
-- 
1.5.4.4

