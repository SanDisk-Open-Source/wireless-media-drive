From 49a63fcc2ae3f1aaf2132dcc0ec42a6269e0f578 Mon Sep 17 00:00:00 2001
From: Peter Chen <peter.chen@freescale.com>
Date: Sun, 30 Jan 2011 13:54:43 +0800
Subject: [PATCH] ENGR00138642-2 usb-device: fix spin lock recursion problem

Some functions at setup_received_irq will cause spin lock recursion problem,
unlock spin locks before calling these functions, and re-lock spin locks
after executing them.

Signed-off-by: Peter Chen <peter.chen@freescale.com>
---
 drivers/usb/gadget/arcotg_udc.c |   17 ++++++++++++++---
 1 files changed, 14 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/gadget/arcotg_udc.c b/drivers/usb/gadget/arcotg_udc.c
index 36ea75e..a6bae6c 100644
--- a/drivers/usb/gadget/arcotg_udc.c
+++ b/drivers/usb/gadget/arcotg_udc.c
@@ -1071,13 +1071,15 @@ fsl_ep_queue(struct usb_ep *_ep, struct usb_request *_req, gfp_t gfp_flags)
 	unsigned long flags;
 	int is_iso = 0;
 
-	spin_lock_irqsave(&udc->lock, flags);
 
 	if (!_ep || !ep->desc) {
 		VDBG("%s, bad ep\n", __func__);
-		spin_unlock_irqrestore(&udc->lock, flags);
 		return -EINVAL;
 	}
+
+	udc = ep->udc;
+	spin_lock_irqsave(&udc->lock, flags);
+
 	/* catch various bogus parameters */
 	if (!_req || !req->req.buf || (ep_index(ep)
 				      && !list_empty(&req->queue))) {
@@ -1093,7 +1095,6 @@ fsl_ep_queue(struct usb_ep *_ep, struct usb_request *_req, gfp_t gfp_flags)
 		is_iso = 1;
 	}
 
-	udc = ep->udc;
 	if (!udc->driver || udc->gadget.speed == USB_SPEED_UNKNOWN) {
 		spin_unlock_irqrestore(&udc->lock, flags);
 		return -ESHUTDOWN;
@@ -1612,8 +1613,10 @@ static void setup_received_irq(struct fsl_udc *udc,
 		if (setup->bRequestType & USB_DIR_IN) {
 			dir = EP_DIR_OUT;
 		}
+		spin_unlock(&udc->lock);
 		if (ep0_prime_status(udc, dir))
 			ep0stall(udc);
+		spin_lock(&udc->lock);
 	}
 	/* We process some stardard setup requests here */
 	switch (setup->bRequest) {
@@ -1622,7 +1625,9 @@ static void setup_received_irq(struct fsl_udc *udc,
 		if ((setup->bRequestType & (USB_DIR_IN | USB_TYPE_MASK))
 					!= (USB_DIR_IN | USB_TYPE_STANDARD))
 			break;
+		spin_unlock(&udc->lock);
 		ch9getstatus(udc, setup->bRequestType, wValue, wIndex, wLength);
+		spin_lock(&udc->lock);
 		return;
 
 	case USB_REQ_SET_ADDRESS:
@@ -1630,10 +1635,14 @@ static void setup_received_irq(struct fsl_udc *udc,
 		if (setup->bRequestType != (USB_DIR_OUT | USB_TYPE_STANDARD
 						| USB_RECIP_DEVICE))
 			break;
+		spin_unlock(&udc->lock);
 		ch9setaddress(udc, wValue, wIndex, wLength);
+		spin_lock(&udc->lock);
 		return;
 	case USB_REQ_SET_CONFIGURATION:
+		spin_unlock(&udc->lock);
 		fsl_vbus_draw(gadget, mA);
+		spin_lock(&udc->lock);
 	     break;
 	case USB_REQ_CLEAR_FEATURE:
 	case USB_REQ_SET_FEATURE:
@@ -1680,8 +1689,10 @@ static void setup_received_irq(struct fsl_udc *udc,
 			break;
 
 		if (rc == 0) {
+			spin_unlock(&udc->lock);
 			if (ep0_prime_status(udc, EP_DIR_IN))
 				ep0stall(udc);
+			spin_lock(&udc->lock);
 		}
 		if (ptc) {
 			u32 tmp;
-- 
1.5.4.4

