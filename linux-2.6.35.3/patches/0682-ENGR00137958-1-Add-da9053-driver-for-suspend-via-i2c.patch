From 96b76e38338a4fd85e6472767c61251c899274c1 Mon Sep 17 00:00:00 2001
From: Zhou Jingyu <b02241@freescale.com>
Date: Thu, 13 Jan 2011 21:31:28 +0800
Subject: [PATCH] ENGR00137958-1 Add da9053 driver for suspend via i2c command

Add da9053 driver code support for suspend

Signed-off-by: Zhou Jingyu <Jingyu.Zhou@freescale.com>
---
 drivers/mfd/da9052-core.c            |    8 ++++
 drivers/regulator/da9052-regulator.c |   77 ++++++++++++++++++++++++++++++++++
 2 files changed, 85 insertions(+), 0 deletions(-)

diff --git a/drivers/mfd/da9052-core.c b/drivers/mfd/da9052-core.c
index 7f6c049..68e8393 100644
--- a/drivers/mfd/da9052-core.c
+++ b/drivers/mfd/da9052-core.c
@@ -443,6 +443,7 @@ int da9052_ssc_init(struct da9052 *da9052)
 {
 	int cnt;
 	struct da9052_platform_data *pdata;
+	struct da9052_ssc_msg ssc_msg;
 
 	/* Initialize eve_nb_array */
 	for (cnt = 0; cnt < EVE_CNT; cnt++)
@@ -488,9 +489,16 @@ int da9052_ssc_init(struct da9052 *da9052)
 
 	INIT_WORK(&da9052->eh_isr_work, eh_workqueue_isr);
 
+	ssc_msg.addr = DA9052_IRQMASKA_REG;
+	ssc_msg.data = 0xff;
+	da9052->write(da9052, &ssc_msg);
+	ssc_msg.addr = DA9052_IRQMASKC_REG;
+	ssc_msg.data = 0xff;
+	da9052->write(da9052, &ssc_msg);
 	if (request_irq(da9052->irq, da9052_eh_isr, IRQ_TYPE_LEVEL_LOW,
 		DA9052_EH_DEVICE_NAME, da9052))
 		return -EIO;
+	enable_irq_wake(da9052->irq);
 
 	return 0;
 }
diff --git a/drivers/regulator/da9052-regulator.c b/drivers/regulator/da9052-regulator.c
index fa6aae5..3445283 100644
--- a/drivers/regulator/da9052-regulator.c
+++ b/drivers/regulator/da9052-regulator.c
@@ -385,6 +385,78 @@ int da9052_ldo_buck_get_voltage(struct regulator_dev *rdev)
 EXPORT_SYMBOL_GPL(da9052_ldo_buck_get_voltage);
 /* Code added by KPIT to support additional attributes in sysfs - setvoltage */
 
+static int da9052_set_suspend_voltage(struct regulator_dev *rdev, int uV)
+{
+	struct da9052_regulator_priv *priv = rdev_get_drvdata(rdev);
+	struct da9052_ssc_msg ssc_msg;
+	int id = rdev_get_id(rdev);
+	int ret;
+	int ldo_volt = 0;
+
+
+	/* Check Minimum/ Maximum voltage range */
+	if (uV < da9052_regulators[id].reg_const.min_uV ||
+		uV > da9052_regulators[id].reg_const.max_uV)
+		return -EINVAL;
+
+	/* Get the ldo register value */
+	/* Varying step size for BUCK PERI */
+	if ((da9052_regulators[id].reg_desc.id == DA9052_BUCK_PERI) &&
+			(uV >= DA9052_BUCK_PERI_VALUES_3000)) {
+		ldo_volt = (DA9052_BUCK_PERI_VALUES_3000 -
+			da9052_regulators[id].reg_const.min_uV)/
+			(da9052_regulators[id].step_uV);
+		ldo_volt += (uV - DA9052_BUCK_PERI_VALUES_3000)/
+			(DA9052_BUCK_PERI_STEP_ABOVE_3000);
+	} else{
+		ldo_volt = (uV - da9052_regulators[id].reg_const.min_uV)/
+			(da9052_regulators[id].step_uV);
+	}
+	ldo_volt |= 0x80;
+	dev_info(&rdev->dev, "preset to %d %x\n", uV, ldo_volt);
+
+	/* Configure LDO Voltage, CONF bits */
+	ssc_msg.addr = da9052_regulators[id].reg_add;
+	ssc_msg.data = 0;
+
+	/* Read register */
+	da9052_lock(priv->da9052);
+	ret = priv->da9052->read(priv->da9052, &ssc_msg);
+	if (ret) {
+		da9052_unlock(priv->da9052);
+		return -EIO;
+	}
+
+	ssc_msg.data = (ssc_msg.data & ~(da9052_regulators[id].mask_bits));
+	ssc_msg.data |= ldo_volt;
+
+	ret = priv->da9052->write(priv->da9052, &ssc_msg);
+	if (ret) {
+		da9052_unlock(priv->da9052);
+		return -EIO;
+	}
+
+	da9052_unlock(priv->da9052);
+
+	return 0;
+}
+
+static int da9052_ldo_buck_stby_enable(struct regulator_dev *reg)
+{
+	return 0;
+}
+
+static int da9052_ldo_buck_stby_disable(struct regulator_dev *reg)
+{
+	return 0;
+}
+
+static int da9052_ldo_buck_stby_set_mode(struct regulator_dev *reg,
+					unsigned int mode)
+{
+	return 0;
+}
+
 
 static struct regulator_ops da9052_ldo_buck_ops = {
 	.is_enabled = da9052_ldo_buck_is_enabled,
@@ -392,8 +464,13 @@ static struct regulator_ops da9052_ldo_buck_ops = {
 	.disable = da9052_ldo_buck_disable,
 	.get_voltage = da9052_ldo_buck_get_voltage,
 	.set_voltage = da9052_ldo_buck_set_voltage,
+	.set_suspend_voltage = da9052_set_suspend_voltage,
+	.set_suspend_enable = da9052_ldo_buck_stby_enable,
+	.set_suspend_disable = da9052_ldo_buck_stby_disable,
+	.set_suspend_mode = da9052_ldo_buck_stby_set_mode,
 };
 
+
 static int __devinit da9052_regulator_probe(struct platform_device *pdev)
 {
 	struct da9052_regulator_priv *priv;
-- 
1.5.4.4

