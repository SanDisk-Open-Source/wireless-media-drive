From a2b68b3ce165ccb597b6f5fc3254beff955b3291 Mon Sep 17 00:00:00 2001
From: Danny Nold <dannynold@freescale.com>
Date: Tue, 28 Sep 2010 14:34:14 -0500
Subject: [PATCH] ENGR00132011-1 - MSL: Update for kernel 2.6.35 for EPDC

- In order to support the MX508 RDP board, some additional
structures and defines are needed in the MSL.
- Some multiply defined EPDC functions in ARM2 changed to be
declared static.
- Move __setup for MAX17135 down into regulator driver to avoid
conflict between RDP and ARM2 platforms.

Signed-off-by: Danny Nold <dannynold@freescale.com>
---
 arch/arm/mach-mx5/mx50_arm2.c |  173 ++++++++++---------------------
 arch/arm/mach-mx5/mx50_rdp.c  |  232 ++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 284 insertions(+), 121 deletions(-)

diff --git a/arch/arm/mach-mx5/mx50_arm2.c b/arch/arm/mach-mx5/mx50_arm2.c
index e713285..bfaffe3 100644
--- a/arch/arm/mach-mx5/mx50_arm2.c
+++ b/arch/arm/mach-mx5/mx50_arm2.c
@@ -498,7 +498,7 @@ static struct regulator_init_data max17135_init_data[] __initdata = {
 	},
 };
 
-void epdc_get_pins(void)
+static void epdc_get_pins(void)
 {
 	/* Claim GPIOs for EPDC pins - used during power up/down */
 	gpio_request(EPDC_D0, "epdc_d0");
@@ -523,7 +523,7 @@ void epdc_get_pins(void)
 	gpio_request(EPDC_SDCE2, "epdc_sdce2");
 }
 
-void epdc_put_pins(void)
+static void epdc_put_pins(void)
 {
 	gpio_free(EPDC_D0);
 	gpio_free(EPDC_D1);
@@ -547,50 +547,57 @@ void epdc_put_pins(void)
 	gpio_free(EPDC_SDCE2);
 }
 
-void epdc_enable_pins(void)
-{
-	struct pad_desc epdc_d0 = MX50_PAD_EPDC_D0__EPDC_D0;
-	struct pad_desc epdc_d1 = MX50_PAD_EPDC_D1__EPDC_D1;
-	struct pad_desc epdc_d2 = MX50_PAD_EPDC_D2__EPDC_D2;
-	struct pad_desc epdc_d3 = MX50_PAD_EPDC_D3__EPDC_D3;
-	struct pad_desc epdc_d4 = MX50_PAD_EPDC_D4__EPDC_D4;
-	struct pad_desc epdc_d5 = MX50_PAD_EPDC_D5__EPDC_D5;
-	struct pad_desc epdc_d6 = MX50_PAD_EPDC_D6__EPDC_D6;
-	struct pad_desc epdc_d7 = MX50_PAD_EPDC_D7__EPDC_D7;
-	struct pad_desc epdc_gdclk = MX50_PAD_EPDC_GDCLK__EPDC_GDCLK;
-	struct pad_desc epdc_gdsp = MX50_PAD_EPDC_GDSP__EPDC_GDSP;
-	struct pad_desc epdc_gdoe = MX50_PAD_EPDC_GDOE__EPDC_GDOE;
-	struct pad_desc epdc_gdrl = MX50_PAD_EPDC_GDRL__EPDC_GDRL;
-	struct pad_desc epdc_sdclk = MX50_PAD_EPDC_SDCLK__EPDC_SDCLK;
-	struct pad_desc epdc_sdoe = MX50_PAD_EPDC_SDOE__EPDC_SDOE;
-	struct pad_desc epdc_sdle = MX50_PAD_EPDC_SDLE__EPDC_SDLE;
-	struct pad_desc epdc_sdshr = MX50_PAD_EPDC_SDSHR__EPDC_SDSHR;
-	struct pad_desc epdc_bdr0 = MX50_PAD_EPDC_BDR0__EPDC_BDR0;
-	struct pad_desc epdc_sdce0 = MX50_PAD_EPDC_SDCE0__EPDC_SDCE0;
-	struct pad_desc epdc_sdce1 = MX50_PAD_EPDC_SDCE1__EPDC_SDCE1;
-	struct pad_desc epdc_sdce2 = MX50_PAD_EPDC_SDCE2__EPDC_SDCE2;
+static struct pad_desc  mx50_epdc_pads_enabled[] = {
+	MX50_PAD_EPDC_D0__EPDC_D0,
+	MX50_PAD_EPDC_D1__EPDC_D1,
+	MX50_PAD_EPDC_D2__EPDC_D2,
+	MX50_PAD_EPDC_D3__EPDC_D3,
+	MX50_PAD_EPDC_D4__EPDC_D4,
+	MX50_PAD_EPDC_D5__EPDC_D5,
+	MX50_PAD_EPDC_D6__EPDC_D6,
+	MX50_PAD_EPDC_D7__EPDC_D7,
+	MX50_PAD_EPDC_GDCLK__EPDC_GDCLK,
+	MX50_PAD_EPDC_GDSP__EPDC_GDSP,
+	MX50_PAD_EPDC_GDOE__EPDC_GDOE,
+	MX50_PAD_EPDC_GDRL__EPDC_GDRL,
+	MX50_PAD_EPDC_SDCLK__EPDC_SDCLK,
+	MX50_PAD_EPDC_SDOE__EPDC_SDOE,
+	MX50_PAD_EPDC_SDLE__EPDC_SDLE,
+	MX50_PAD_EPDC_SDSHR__EPDC_SDSHR,
+	MX50_PAD_EPDC_BDR0__EPDC_BDR0,
+	MX50_PAD_EPDC_SDCE0__EPDC_SDCE0,
+	MX50_PAD_EPDC_SDCE1__EPDC_SDCE1,
+	MX50_PAD_EPDC_SDCE2__EPDC_SDCE2,
+};
+
+static struct pad_desc  mx50_epdc_pads_disabled[] = {
+	MX50_PAD_EPDC_D0__GPIO_3_0,
+	MX50_PAD_EPDC_D1__GPIO_3_1,
+	MX50_PAD_EPDC_D2__GPIO_3_2,
+	MX50_PAD_EPDC_D3__GPIO_3_3,
+	MX50_PAD_EPDC_D4__GPIO_3_4,
+	MX50_PAD_EPDC_D5__GPIO_3_5,
+	MX50_PAD_EPDC_D6__GPIO_3_6,
+	MX50_PAD_EPDC_D7__GPIO_3_7,
+	MX50_PAD_EPDC_GDCLK__GPIO_3_16,
+	MX50_PAD_EPDC_GDSP__GPIO_3_17,
+	MX50_PAD_EPDC_GDOE__GPIO_3_18,
+	MX50_PAD_EPDC_GDRL__GPIO_3_19,
+	MX50_PAD_EPDC_SDCLK__GPIO_3_20,
+	MX50_PAD_EPDC_SDOE__GPIO_3_23,
+	MX50_PAD_EPDC_SDLE__GPIO_3_24,
+	MX50_PAD_EPDC_SDSHR__GPIO_3_26,
+	MX50_PAD_EPDC_BDR0__GPIO_4_23,
+	MX50_PAD_EPDC_SDCE0__GPIO_4_25,
+	MX50_PAD_EPDC_SDCE1__GPIO_4_26,
+	MX50_PAD_EPDC_SDCE2__GPIO_4_27,
+};
 
+static void epdc_enable_pins(void)
+{
 	/* Configure MUX settings to enable EPDC use */
-	mxc_iomux_v3_setup_pad(&epdc_d0);
-	mxc_iomux_v3_setup_pad(&epdc_d1);
-	mxc_iomux_v3_setup_pad(&epdc_d2);
-	mxc_iomux_v3_setup_pad(&epdc_d3);
-	mxc_iomux_v3_setup_pad(&epdc_d4);
-	mxc_iomux_v3_setup_pad(&epdc_d5);
-	mxc_iomux_v3_setup_pad(&epdc_d6);
-	mxc_iomux_v3_setup_pad(&epdc_d7);
-	mxc_iomux_v3_setup_pad(&epdc_gdclk);
-	mxc_iomux_v3_setup_pad(&epdc_gdsp);
-	mxc_iomux_v3_setup_pad(&epdc_gdoe);
-	mxc_iomux_v3_setup_pad(&epdc_gdrl);
-	mxc_iomux_v3_setup_pad(&epdc_sdclk);
-	mxc_iomux_v3_setup_pad(&epdc_sdoe);
-	mxc_iomux_v3_setup_pad(&epdc_sdle);
-	mxc_iomux_v3_setup_pad(&epdc_sdshr);
-	mxc_iomux_v3_setup_pad(&epdc_bdr0);
-	mxc_iomux_v3_setup_pad(&epdc_sdce0);
-	mxc_iomux_v3_setup_pad(&epdc_sdce1);
-	mxc_iomux_v3_setup_pad(&epdc_sdce2);
+	mxc_iomux_v3_setup_multiple_pads(mx50_epdc_pads_enabled, \
+				ARRAY_SIZE(mx50_epdc_pads_enabled));
 
 	gpio_direction_input(EPDC_D0);
 	gpio_direction_input(EPDC_D1);
@@ -614,51 +621,12 @@ void epdc_enable_pins(void)
 	gpio_direction_input(EPDC_SDCE2);
 }
 
-void epdc_disable_pins(void)
+static void epdc_disable_pins(void)
 {
-	struct pad_desc epdc_d0 = MX50_PAD_EPDC_D0__GPIO_3_0;
-	struct pad_desc epdc_d1 = MX50_PAD_EPDC_D1__GPIO_3_1;
-	struct pad_desc epdc_d2 = MX50_PAD_EPDC_D2__GPIO_3_2;
-	struct pad_desc epdc_d3 = MX50_PAD_EPDC_D3__GPIO_3_3;
-	struct pad_desc epdc_d4 = MX50_PAD_EPDC_D4__GPIO_3_4;
-	struct pad_desc epdc_d5 = MX50_PAD_EPDC_D5__GPIO_3_5;
-	struct pad_desc epdc_d6 = MX50_PAD_EPDC_D6__GPIO_3_6;
-	struct pad_desc epdc_d7 = MX50_PAD_EPDC_D7__GPIO_3_7;
-	struct pad_desc epdc_gdclk = MX50_PAD_EPDC_GDCLK__GPIO_3_16;
-	struct pad_desc epdc_gdsp = MX50_PAD_EPDC_GDSP__GPIO_3_17;
-	struct pad_desc epdc_gdoe = MX50_PAD_EPDC_GDOE__GPIO_3_18;
-	struct pad_desc epdc_gdrl = MX50_PAD_EPDC_GDRL__GPIO_3_19;
-	struct pad_desc epdc_sdclk = MX50_PAD_EPDC_SDCLK__GPIO_3_20;
-	struct pad_desc epdc_sdoe = MX50_PAD_EPDC_SDOE__GPIO_3_23;
-	struct pad_desc epdc_sdle = MX50_PAD_EPDC_SDLE__GPIO_3_24;
-	struct pad_desc epdc_sdshr = MX50_PAD_EPDC_SDSHR__GPIO_3_26;
-	struct pad_desc epdc_bdr0 = MX50_PAD_EPDC_BDR0__GPIO_4_23;
-	struct pad_desc epdc_sdce0 = MX50_PAD_EPDC_SDCE0__GPIO_4_25;
-	struct pad_desc epdc_sdce1 = MX50_PAD_EPDC_SDCE1__GPIO_4_26;
-	struct pad_desc epdc_sdce2 = MX50_PAD_EPDC_SDCE2__GPIO_4_27;
-
 	/* Configure MUX settings for EPDC pins to
 	 * GPIO and drive to 0. */
-	mxc_iomux_v3_setup_pad(&epdc_d0);
-	mxc_iomux_v3_setup_pad(&epdc_d1);
-	mxc_iomux_v3_setup_pad(&epdc_d2);
-	mxc_iomux_v3_setup_pad(&epdc_d3);
-	mxc_iomux_v3_setup_pad(&epdc_d4);
-	mxc_iomux_v3_setup_pad(&epdc_d5);
-	mxc_iomux_v3_setup_pad(&epdc_d6);
-	mxc_iomux_v3_setup_pad(&epdc_d7);
-	mxc_iomux_v3_setup_pad(&epdc_gdclk);
-	mxc_iomux_v3_setup_pad(&epdc_gdsp);
-	mxc_iomux_v3_setup_pad(&epdc_gdoe);
-	mxc_iomux_v3_setup_pad(&epdc_gdrl);
-	mxc_iomux_v3_setup_pad(&epdc_sdclk);
-	mxc_iomux_v3_setup_pad(&epdc_sdoe);
-	mxc_iomux_v3_setup_pad(&epdc_sdle);
-	mxc_iomux_v3_setup_pad(&epdc_sdshr);
-	mxc_iomux_v3_setup_pad(&epdc_bdr0);
-	mxc_iomux_v3_setup_pad(&epdc_sdce0);
-	mxc_iomux_v3_setup_pad(&epdc_sdce1);
-	mxc_iomux_v3_setup_pad(&epdc_sdce2);
+	mxc_iomux_v3_setup_multiple_pads(mx50_epdc_pads_disabled, \
+				ARRAY_SIZE(mx50_epdc_pads_disabled));
 
 	gpio_direction_output(EPDC_D0, 0);
 	gpio_direction_output(EPDC_D1, 0);
@@ -736,7 +704,6 @@ static struct mxc_epdc_fb_platform_data epdc_data = {
 	.disable_pins = epdc_disable_pins,
 };
 
-
 static struct max17135_platform_data max17135_pdata __initdata = {
 	.vneg_pwrup = 1,
 	.gvee_pwrup = 1,
@@ -753,36 +720,6 @@ static struct max17135_platform_data max17135_pdata __initdata = {
 	.regulator_init = max17135_init_data,
 };
 
-static int __initdata max17135_pass_num = { 1 };
-static int __initdata max17135_vcom = { -1250000 };
-/*
- * Parse user specified options (`max17135:')
- * example:
- * 	max17135:pass=2,vcom=-1250000
- */
-static int __init max17135_setup(char *options)
-{
-	char *opt;
-	while ((opt = strsep(&options, ",")) != NULL) {
-		if (!*opt)
-			continue;
-		if (!strncmp(opt, "pass=", 5))
-			max17135_pass_num =
-				simple_strtoul(opt + 5, NULL, 0);
-		if (!strncmp(opt, "vcom=", 5)) {
-			int offs = 5;
-			if (opt[5] == '-')
-				offs = 6;
-			max17135_vcom =
-				simple_strtoul(opt + offs, NULL, 0);
-			max17135_vcom = -max17135_vcom;
-		}
-	}
-	return 1;
-}
-
-__setup("max17135:", max17135_setup);
-
 static struct i2c_board_info mxc_i2c1_board_info[] __initdata = {
 	{
 	 .type = "sgtl5000-i2c",
@@ -1184,8 +1121,6 @@ static void __init mxc_board_init(void)
 				ARRAY_SIZE(mxc_dataflash_device));
 	i2c_register_board_info(1, mxc_i2c1_board_info,
 				ARRAY_SIZE(mxc_i2c1_board_info));
-	max17135_pdata.pass_num = max17135_pass_num;
-	max17135_pdata.vcom_uV = max17135_vcom;
 	i2c_register_board_info(2, mxc_i2c2_board_info,
 				ARRAY_SIZE(mxc_i2c2_board_info));
 
diff --git a/arch/arm/mach-mx5/mx50_rdp.c b/arch/arm/mach-mx5/mx50_rdp.c
index 81b6345..4c040b6 100644
--- a/arch/arm/mach-mx5/mx50_rdp.c
+++ b/arch/arm/mach-mx5/mx50_rdp.c
@@ -71,6 +71,26 @@
 #define SD2_CD	(4*32 + 17) /*GPIO_5_17 */
 #define HP_DETECT	(3*32 + 15)	/*GPIO_4_15 */
 #define PWR_INT		(3*32 + 18)	/*GPIO_4_18 */
+#define EPDC_D0		(2*32 + 1)	/*GPIO_3_0 */
+#define EPDC_D1		(2*32 + 2)	/*GPIO_3_1 */
+#define EPDC_D2		(2*32 + 3)	/*GPIO_3_2 */
+#define EPDC_D3		(2*32 + 4)	/*GPIO_3_3 */
+#define EPDC_D4		(2*32 + 5)	/*GPIO_3_4 */
+#define EPDC_D5		(2*32 + 6)	/*GPIO_3_5 */
+#define EPDC_D6		(2*32 + 7)	/*GPIO_3_6 */
+#define EPDC_D7		(2*32 + 8)	/*GPIO_3_7 */
+#define EPDC_GDCLK	(2*32 + 16)	/*GPIO_3_16 */
+#define EPDC_GDSP	(2*32 + 17)	/*GPIO_3_17 */
+#define EPDC_GDOE	(2*32 + 18)	/*GPIO_3_18 */
+#define EPDC_GDRL	(2*32 + 19)	/*GPIO_3_19 */
+#define EPDC_SDCLK	(2*32 + 20)	/*GPIO_3_20 */
+#define EPDC_SDOE	(2*32 + 23)	/*GPIO_3_23 */
+#define EPDC_SDLE	(2*32 + 24)	/*GPIO_3_24 */
+#define EPDC_SDSHR	(2*32 + 26)	/*GPIO_3_26 */
+#define EPDC_BDR0	(3*32 + 23)	/*GPIO_4_23 */
+#define EPDC_SDCE0	(3*32 + 25)	/*GPIO_4_25 */
+#define EPDC_SDCE1	(3*32 + 26)	/*GPIO_4_26 */
+#define EPDC_SDCE2	(3*32 + 27)	/*GPIO_4_27 */
 #define EPDC_PMIC_WAKE		(5*32 + 16)	/*GPIO_6_16 */
 #define EPDC_PMIC_INT		(5*32 + 17)	/*GPIO_6_17 */
 #define EPDC_VCOM	(3*32 + 21)	/*GPIO_4_21 */
@@ -437,6 +457,7 @@ static struct regulator_init_data max17135_init_data[] __initdata = {
 	{
 		.constraints = {
 			.name = "DISPLAY",
+			.valid_ops_mask =  REGULATOR_CHANGE_STATUS,
 		},
 	}, {
 		.constraints = {
@@ -467,7 +488,8 @@ static struct regulator_init_data max17135_init_data[] __initdata = {
 			.name = "VCOM",
 			.min_uV = mV_to_uV(-4325),
 			.max_uV = mV_to_uV(-500),
-			.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE,
+			.valid_ops_mask = REGULATOR_CHANGE_VOLTAGE |
+			REGULATOR_CHANGE_STATUS,
 		},
 	}, {
 		.constraints = {
@@ -484,6 +506,212 @@ static struct regulator_init_data max17135_init_data[] __initdata = {
 	},
 };
 
+static void epdc_get_pins(void)
+{
+	/* Claim GPIOs for EPDC pins - used during power up/down */
+	gpio_request(EPDC_D0, "epdc_d0");
+	gpio_request(EPDC_D1, "epdc_d1");
+	gpio_request(EPDC_D2, "epdc_d2");
+	gpio_request(EPDC_D3, "epdc_d3");
+	gpio_request(EPDC_D4, "epdc_d4");
+	gpio_request(EPDC_D5, "epdc_d5");
+	gpio_request(EPDC_D6, "epdc_d6");
+	gpio_request(EPDC_D7, "epdc_d7");
+	gpio_request(EPDC_GDCLK, "epdc_gdclk");
+	gpio_request(EPDC_GDSP, "epdc_gdsp");
+	gpio_request(EPDC_GDOE, "epdc_gdoe");
+	gpio_request(EPDC_GDRL, "epdc_gdrl");
+	gpio_request(EPDC_SDCLK, "epdc_sdclk");
+	gpio_request(EPDC_SDOE, "epdc_sdoe");
+	gpio_request(EPDC_SDLE, "epdc_sdle");
+	gpio_request(EPDC_SDSHR, "epdc_sdshr");
+	gpio_request(EPDC_BDR0, "epdc_bdr0");
+	gpio_request(EPDC_SDCE0, "epdc_sdce0");
+	gpio_request(EPDC_SDCE1, "epdc_sdce1");
+	gpio_request(EPDC_SDCE2, "epdc_sdce2");
+}
+
+static void epdc_put_pins(void)
+{
+	gpio_free(EPDC_D0);
+	gpio_free(EPDC_D1);
+	gpio_free(EPDC_D2);
+	gpio_free(EPDC_D3);
+	gpio_free(EPDC_D4);
+	gpio_free(EPDC_D5);
+	gpio_free(EPDC_D6);
+	gpio_free(EPDC_D7);
+	gpio_free(EPDC_GDCLK);
+	gpio_free(EPDC_GDSP);
+	gpio_free(EPDC_GDOE);
+	gpio_free(EPDC_GDRL);
+	gpio_free(EPDC_SDCLK);
+	gpio_free(EPDC_SDOE);
+	gpio_free(EPDC_SDLE);
+	gpio_free(EPDC_SDSHR);
+	gpio_free(EPDC_BDR0);
+	gpio_free(EPDC_SDCE0);
+	gpio_free(EPDC_SDCE1);
+	gpio_free(EPDC_SDCE2);
+}
+
+static struct pad_desc  mx50_epdc_pads_enabled[] = {
+	MX50_PAD_EPDC_D0__EPDC_D0,
+	MX50_PAD_EPDC_D1__EPDC_D1,
+	MX50_PAD_EPDC_D2__EPDC_D2,
+	MX50_PAD_EPDC_D3__EPDC_D3,
+	MX50_PAD_EPDC_D4__EPDC_D4,
+	MX50_PAD_EPDC_D5__EPDC_D5,
+	MX50_PAD_EPDC_D6__EPDC_D6,
+	MX50_PAD_EPDC_D7__EPDC_D7,
+	MX50_PAD_EPDC_GDCLK__EPDC_GDCLK,
+	MX50_PAD_EPDC_GDSP__EPDC_GDSP,
+	MX50_PAD_EPDC_GDOE__EPDC_GDOE,
+	MX50_PAD_EPDC_GDRL__EPDC_GDRL,
+	MX50_PAD_EPDC_SDCLK__EPDC_SDCLK,
+	MX50_PAD_EPDC_SDOE__EPDC_SDOE,
+	MX50_PAD_EPDC_SDLE__EPDC_SDLE,
+	MX50_PAD_EPDC_SDSHR__EPDC_SDSHR,
+	MX50_PAD_EPDC_BDR0__EPDC_BDR0,
+	MX50_PAD_EPDC_SDCE0__EPDC_SDCE0,
+	MX50_PAD_EPDC_SDCE1__EPDC_SDCE1,
+	MX50_PAD_EPDC_SDCE2__EPDC_SDCE2,
+};
+
+static struct pad_desc  mx50_epdc_pads_disabled[] = {
+	MX50_PAD_EPDC_D0__GPIO_3_0,
+	MX50_PAD_EPDC_D1__GPIO_3_1,
+	MX50_PAD_EPDC_D2__GPIO_3_2,
+	MX50_PAD_EPDC_D3__GPIO_3_3,
+	MX50_PAD_EPDC_D4__GPIO_3_4,
+	MX50_PAD_EPDC_D5__GPIO_3_5,
+	MX50_PAD_EPDC_D6__GPIO_3_6,
+	MX50_PAD_EPDC_D7__GPIO_3_7,
+	MX50_PAD_EPDC_GDCLK__GPIO_3_16,
+	MX50_PAD_EPDC_GDSP__GPIO_3_17,
+	MX50_PAD_EPDC_GDOE__GPIO_3_18,
+	MX50_PAD_EPDC_GDRL__GPIO_3_19,
+	MX50_PAD_EPDC_SDCLK__GPIO_3_20,
+	MX50_PAD_EPDC_SDOE__GPIO_3_23,
+	MX50_PAD_EPDC_SDLE__GPIO_3_24,
+	MX50_PAD_EPDC_SDSHR__GPIO_3_26,
+	MX50_PAD_EPDC_BDR0__GPIO_4_23,
+	MX50_PAD_EPDC_SDCE0__GPIO_4_25,
+	MX50_PAD_EPDC_SDCE1__GPIO_4_26,
+	MX50_PAD_EPDC_SDCE2__GPIO_4_27,
+};
+
+static void epdc_enable_pins(void)
+{
+	/* Configure MUX settings to enable EPDC use */
+	mxc_iomux_v3_setup_multiple_pads(mx50_epdc_pads_enabled, \
+				ARRAY_SIZE(mx50_epdc_pads_enabled));
+
+	gpio_direction_input(EPDC_D0);
+	gpio_direction_input(EPDC_D1);
+	gpio_direction_input(EPDC_D2);
+	gpio_direction_input(EPDC_D3);
+	gpio_direction_input(EPDC_D4);
+	gpio_direction_input(EPDC_D5);
+	gpio_direction_input(EPDC_D6);
+	gpio_direction_input(EPDC_D7);
+	gpio_direction_input(EPDC_GDCLK);
+	gpio_direction_input(EPDC_GDSP);
+	gpio_direction_input(EPDC_GDOE);
+	gpio_direction_input(EPDC_GDRL);
+	gpio_direction_input(EPDC_SDCLK);
+	gpio_direction_input(EPDC_SDOE);
+	gpio_direction_input(EPDC_SDLE);
+	gpio_direction_input(EPDC_SDSHR);
+	gpio_direction_input(EPDC_BDR0);
+	gpio_direction_input(EPDC_SDCE0);
+	gpio_direction_input(EPDC_SDCE1);
+	gpio_direction_input(EPDC_SDCE2);
+}
+
+static void epdc_disable_pins(void)
+{
+	/* Configure MUX settings for EPDC pins to
+	 * GPIO and drive to 0. */
+	mxc_iomux_v3_setup_multiple_pads(mx50_epdc_pads_disabled, \
+				ARRAY_SIZE(mx50_epdc_pads_disabled));
+
+	gpio_direction_output(EPDC_D0, 0);
+	gpio_direction_output(EPDC_D1, 0);
+	gpio_direction_output(EPDC_D2, 0);
+	gpio_direction_output(EPDC_D3, 0);
+	gpio_direction_output(EPDC_D4, 0);
+	gpio_direction_output(EPDC_D5, 0);
+	gpio_direction_output(EPDC_D6, 0);
+	gpio_direction_output(EPDC_D7, 0);
+	gpio_direction_output(EPDC_GDCLK, 0);
+	gpio_direction_output(EPDC_GDSP, 0);
+	gpio_direction_output(EPDC_GDOE, 0);
+	gpio_direction_output(EPDC_GDRL, 0);
+	gpio_direction_output(EPDC_SDCLK, 0);
+	gpio_direction_output(EPDC_SDOE, 0);
+	gpio_direction_output(EPDC_SDLE, 0);
+	gpio_direction_output(EPDC_SDSHR, 0);
+	gpio_direction_output(EPDC_BDR0, 0);
+	gpio_direction_output(EPDC_SDCE0, 0);
+	gpio_direction_output(EPDC_SDCE1, 0);
+	gpio_direction_output(EPDC_SDCE2, 0);
+}
+
+static struct fb_videomode e60_mode = {
+	.name = "E60",
+	.refresh = 50,
+	.xres = 800,
+	.yres = 600,
+	.pixclock = 20000000,
+	.left_margin = 10,
+	.right_margin = 217,
+	.upper_margin = 4,
+	.lower_margin = 10,
+	.hsync_len = 20,
+	.vsync_len = 4,
+	.sync = 0,
+	.vmode = FB_VMODE_NONINTERLACED,
+	.flag = 0,
+};
+
+static struct fb_videomode e97_mode = {
+	.name = "E97",
+	.refresh = 50,
+	.xres = 1200,
+	.yres = 825,
+	.pixclock = 32000000,
+	.left_margin = 8,
+	.right_margin = 125,
+	.upper_margin = 4,
+	.lower_margin = 17,
+	.hsync_len = 20,
+	.vsync_len = 4,
+	.sync = 0,
+	.vmode = FB_VMODE_NONINTERLACED,
+	.flag = 0,
+};
+
+static struct mxc_epdc_fb_mode panel_modes[] = {
+	{
+		&e60_mode,
+		4, 10, 20, 10, 20, 480, 20, 0, 1, 1,
+	},
+	{
+		&e97_mode,
+		8, 10, 20, 10, 20, 580, 20, 0, 1, 3,
+	},
+};
+
+static struct mxc_epdc_fb_platform_data epdc_data = {
+	.epdc_mode = panel_modes,
+	.num_modes = ARRAY_SIZE(panel_modes),
+	.get_pins = epdc_get_pins,
+	.put_pins = epdc_put_pins,
+	.enable_pins = epdc_enable_pins,
+	.disable_pins = epdc_disable_pins,
+};
+
 static struct max17135_platform_data max17135_pdata __initdata = {
 	.vneg_pwrup = 1,
 	.gvee_pwrup = 1,
@@ -866,7 +1094,7 @@ static void __init mxc_board_init(void)
 	i2c_register_board_info(1, mxc_i2c1_board_info,
 				ARRAY_SIZE(mxc_i2c1_board_info));
 
-	mxc_register_device(&epdc_device, NULL);
+	mxc_register_device(&epdc_device, &epdc_data);
 	mxc_register_device(&lcd_wvga_device, &lcd_wvga_data);
 	mxc_register_device(&elcdif_device, &fb_data[0]);
 	mxc_register_device(&mxs_viim, NULL);
-- 
1.5.4.4

