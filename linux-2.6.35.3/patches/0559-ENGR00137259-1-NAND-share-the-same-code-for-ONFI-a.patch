From 0e0af21a639366876d46ae8b38a5a4c9bab713af Mon Sep 17 00:00:00 2001
From: Huang Shijie <b32955@freescale.com>
Date: Wed, 22 Dec 2010 12:42:08 +0800
Subject: [PATCH] ENGR00137259-1 NAND : share the same code for ONFI and TOGGLE nand

Spilit the same initialization code for DDR.
Make the code simply and tidy.

Signed-off-by: Huang Shijie <b32955@freescale.com>
---
 drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c |  180 ++++++++++-----------------
 1 files changed, 63 insertions(+), 117 deletions(-)

diff --git a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c
index fc9f720..84aaf7b 100644
--- a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c
+++ b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c
@@ -77,60 +77,10 @@ static void setup_ddr_timing_onfi(struct gpmi_nfc_data *this)
 	__raw_writel(value, resources->gpmi_regs + HW_GPMI_CTRL1_SET);
 }
 
-static int enable_ddr_onfi(struct gpmi_nfc_data *this)
+/* This must be called in the context of enabling necessary clocks */
+static void common_ddr_init(struct resources *resources)
 {
 	uint32_t value;
-	struct resources  *resources = &this->resources;
-	struct mil *mil	= &this->mil;
-	struct nand_chip *nand = &this->mil.nand;
-	struct mtd_info	 *mtd = &mil->mtd;
-	int saved_chip_number = 0;
-	uint8_t device_feature[FEATURE_SIZE];
-	int mode = 0;/* there is 5 mode available, default is 0 */
-
-	saved_chip_number = mil->current_chip;
-	nand->select_chip(mtd, 0);
-
-	/* [0] set proper timing */
-	__raw_writel(BF_GPMI_TIMING0_ADDRESS_SETUP(0x1)
-			| BF_GPMI_TIMING0_DATA_HOLD(0x3)
-			| BF_GPMI_TIMING0_DATA_SETUP(0x3),
-			resources->gpmi_regs + HW_GPMI_TIMING0);
-
-	/* [1] send SET FEATURE commond to NAND */
-	memset(device_feature, 0, sizeof(device_feature));
-	device_feature[0] = (0x1 << 4) | (mode & 0x7);
-
-	nand->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
-	nand->cmdfunc(mtd, NAND_CMD_SET_FEATURE, 1, -1);
-	nand->write_buf(mtd, device_feature, FEATURE_SIZE);
-
-	/* [2] set clk divider */
-	__raw_writel(BM_GPMI_CTRL1_GPMI_CLK_DIV2_EN,
-			resources->gpmi_regs + HW_GPMI_CTRL1_SET);
-
-	/* [3] about the clock, pay attention! */
-	nand->select_chip(mtd, saved_chip_number);
-	{
-		struct clk *pll1;
-		pll1 = clk_get(NULL, "pll1_main_clk");
-		if (IS_ERR(pll1)) {
-			printk(KERN_INFO "No PLL1 clock\n");
-			return -EINVAL;
-		}
-		clk_set_parent(resources->clock, pll1);
-		clk_set_rate(resources->clock, 20000000);
-	}
-	nand->select_chip(mtd, 0);
-
-	/* [4] setup timing */
-	setup_ddr_timing_onfi(this);
-
-	/* [5] set to SYNC mode */
-	__raw_writel(BM_GPMI_CTRL1_TOGGLE_MODE,
-			    resources->gpmi_regs + HW_GPMI_CTRL1_CLR);
-	__raw_writel(BM_GPMI_CTRL1_SSYNCMODE | BM_GPMI_CTRL1_GANGED_RDYBUSY,
-			    resources->gpmi_regs + HW_GPMI_CTRL1_SET);
 
 	/* [6] enable both write & read DDR DLLs */
 	value = BM_GPMI_READ_DDR_DLL_CTRL_REFCLK_ON |
@@ -197,6 +147,65 @@ static int enable_ddr_onfi(struct gpmi_nfc_data *this)
 	value = __raw_readl(resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
 	value |= BM_GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE;
 	__raw_writel(value, resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
+}
+
+static int enable_ddr_onfi(struct gpmi_nfc_data *this)
+{
+	uint32_t value;
+	struct resources  *resources = &this->resources;
+	struct mil *mil	= &this->mil;
+	struct nand_chip *nand = &this->mil.nand;
+	struct mtd_info	 *mtd = &mil->mtd;
+	int saved_chip_number = 0;
+	uint8_t device_feature[FEATURE_SIZE];
+	int mode = 0;/* there is 5 mode available, default is 0 */
+
+	saved_chip_number = mil->current_chip;
+	nand->select_chip(mtd, 0);
+
+	/* [0] set proper timing */
+	__raw_writel(BF_GPMI_TIMING0_ADDRESS_SETUP(0x1)
+			| BF_GPMI_TIMING0_DATA_HOLD(0x3)
+			| BF_GPMI_TIMING0_DATA_SETUP(0x3),
+			resources->gpmi_regs + HW_GPMI_TIMING0);
+
+	/* [1] send SET FEATURE commond to NAND */
+	memset(device_feature, 0, sizeof(device_feature));
+	device_feature[0] = (0x1 << 4) | (mode & 0x7);
+
+	nand->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+	nand->cmdfunc(mtd, NAND_CMD_SET_FEATURE, 1, -1);
+	nand->write_buf(mtd, device_feature, FEATURE_SIZE);
+
+	/* [2] set clk divider */
+	__raw_writel(BM_GPMI_CTRL1_GPMI_CLK_DIV2_EN,
+			resources->gpmi_regs + HW_GPMI_CTRL1_SET);
+
+	/* [3] about the clock, pay attention! */
+	nand->select_chip(mtd, saved_chip_number);
+	{
+		struct clk *pll1;
+		pll1 = clk_get(NULL, "pll1_main_clk");
+		if (IS_ERR(pll1)) {
+			printk(KERN_INFO "No PLL1 clock\n");
+			return -EINVAL;
+		}
+		clk_set_parent(resources->clock, pll1);
+		clk_set_rate(resources->clock, 20000000);
+	}
+	nand->select_chip(mtd, 0);
+
+	/* [4] setup timing */
+	setup_ddr_timing_onfi(this);
+
+	/* [5] set to SYNC mode */
+	__raw_writel(BM_GPMI_CTRL1_TOGGLE_MODE,
+			    resources->gpmi_regs + HW_GPMI_CTRL1_CLR);
+	__raw_writel(BM_GPMI_CTRL1_SSYNCMODE | BM_GPMI_CTRL1_GANGED_RDYBUSY,
+			    resources->gpmi_regs + HW_GPMI_CTRL1_SET);
+
+	/* common DDR initialization */
+	common_ddr_init(resources);
 
 	onfi_ddr_mode = 1;
 	nand->select_chip(mtd, saved_chip_number);
@@ -283,71 +292,8 @@ static int enable_ddr_toggle(struct gpmi_nfc_data *this)
 	__raw_writel(BM_GPMI_CTRL1_TOGGLE_MODE | BM_GPMI_CTRL1_GANGED_RDYBUSY,
 			    resources->gpmi_regs + HW_GPMI_CTRL1_SET);
 
-	/* [6] enable both write & read DDR DLLs */
-	value = BM_GPMI_READ_DDR_DLL_CTRL_REFCLK_ON |
-		BM_GPMI_READ_DDR_DLL_CTRL_ENABLE |
-		BF_GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT(0x2) |
-		BF_GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET(0x7);
-
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-
-	/* [7] reset read */
-	__raw_writel(value | BM_GPMI_READ_DDR_DLL_CTRL_RESET,
-			resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-	value = value & ~BM_GPMI_READ_DDR_DLL_CTRL_RESET;
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-
-	value = BM_GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON |
-		BM_GPMI_WRITE_DDR_DLL_CTRL_ENABLE    |
-		BF_GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT(0x2) |
-		BF_GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET(0x7) ,
-
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
-
-	/* [8] reset write */
-	__raw_writel(value | BM_GPMI_WRITE_DDR_DLL_CTRL_RESET,
-			resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
-
-	/* [9] wait for locks for read and write  */
-	do {
-		uint32_t read_status, write_status;
-		uint32_t r_mask, w_mask;
-
-		read_status = __raw_readl(resources->gpmi_regs
-					+ HW_GPMI_READ_DDR_DLL_STS);
-		write_status = __raw_readl(resources->gpmi_regs
-					+ HW_GPMI_WRITE_DDR_DLL_STS);
-
-		r_mask = (BM_GPMI_READ_DDR_DLL_STS_REF_LOCK |
-				BM_GPMI_READ_DDR_DLL_STS_SLV_LOCK);
-		w_mask = (BM_GPMI_WRITE_DDR_DLL_STS_REF_LOCK |
-				BM_GPMI_WRITE_DDR_DLL_STS_SLV_LOCK);
-
-		if (((read_status & r_mask) == r_mask)
-			&& ((write_status & w_mask) == w_mask))
-				break;
-	} while (1);
-
-	/* [10] force update of read/write */
-	value = __raw_readl(resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-	__raw_writel(value | BM_GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD,
-			resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-
-	value = __raw_readl(resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
-	__raw_writel(value | BM_GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD,
-			resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
-
-	/* [11] set gate update */
-	value = __raw_readl(resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-	value |= BM_GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE;
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_READ_DDR_DLL_CTRL);
-
-	value = __raw_readl(resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
-	value |= BM_GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE;
-	__raw_writel(value, resources->gpmi_regs + HW_GPMI_WRITE_DDR_DLL_CTRL);
+	/* common DDR initialization */
+	common_ddr_init(resources);
 
 	onfi_ddr_mode = 1;
 	nand->select_chip(mtd, saved_chip_number);
-- 
1.5.4.4

