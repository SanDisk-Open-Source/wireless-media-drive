From c686ef90bea2d6cdaa61e9b6cf8a09ad38725683 Mon Sep 17 00:00:00 2001
From: Huang Shijie <b32955@freescale.com>
Date: Thu, 23 Dec 2010 11:18:11 +0800
Subject: [PATCH] ENGR00137270-2 GPMI : use start_dma_with_bch_irq() to replace old code

Use the start_dma_with_bch_irq() to replace old code.
This new code will make the imx23/imx28 wait the DMA for one second,
If the DMA failed, an error will be printed.

Signed-off-by: Huang Shijie <b32955@freescale.com>
---
 drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v0.c |   64 ++-------------------------
 drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v1.c |   55 +----------------------
 drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c |   35 +--------------
 3 files changed, 9 insertions(+), 145 deletions(-)

diff --git a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v0.c b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v0.c
index 389f256..43a447a 100644
--- a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v0.c
+++ b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v0.c
@@ -601,19 +601,13 @@ static int send_page(struct gpmi_nfc_data *this, unsigned chip,
 	struct nfc_hal       *nfc       =  this->nfc;
 	struct nfc_geometry  *nfc_geo   = &this->nfc_geometry;
 	struct mxs_dma_desc  **d        = nfc->dma_descriptors;
-	int                  dma_channel;
-	int                  error = 0;
+	int    dma_channel		= resources->dma_low_channel + chip;
 	uint32_t             command_mode;
 	uint32_t             address;
 	uint32_t             ecc_command;
 	uint32_t             buffer_mask;
 
-	/* Compute the DMA channel. */
-
-	dma_channel = resources->dma_low_channel + chip;
-
 	/* A DMA descriptor that does an ECC page read. */
-
 	command_mode = BV_GPMI_CTRL0_COMMAND_MODE__WRITE;
 	address      = BV_GPMI_CTRL0_ADDRESS__NAND_DATA;
 	ecc_command  = BV_GPMI_ECCCTRL_ECC_CMD__BCH_ENCODE;
@@ -630,40 +624,18 @@ static int send_page(struct gpmi_nfc_data *this, unsigned chip,
 		BF_GPMI_CTRL0_CS(chip)                   |
 		BF_GPMI_CTRL0_ADDRESS(address)           |
 		BF_GPMI_CTRL0_XFER_COUNT(0)              ;
-
 	(*d)->cmd.pio_words[1] = 0;
-
 	(*d)->cmd.pio_words[2] =
 		BM_GPMI_ECCCTRL_ENABLE_ECC               |
 		BF_GPMI_ECCCTRL_ECC_CMD(ecc_command)     |
 		BF_GPMI_ECCCTRL_BUFFER_MASK(buffer_mask) ;
-
 	(*d)->cmd.pio_words[3] = nfc_geo->page_size_in_bytes;
 	(*d)->cmd.pio_words[4] = payload;
 	(*d)->cmd.pio_words[5] = auxiliary;
 
 	mxs_dma_desc_append(dma_channel, (*d));
-	d++;
-
-	/* Prepare to receive an interrupt from the BCH block. */
-
-	init_completion(&nfc->bch_done);
-
-	/* Go! */
-
-	error = gpmi_nfc_dma_go(this, dma_channel);
-
-	if (error)
-		dev_err(dev, "[%s] DMA error\n", __func__);
-
-	/* Wait for the interrupt from the BCH block. */
-
-	wait_for_completion(&nfc->bch_done);
-
-	/* Return success. */
-
-	return error;
 
+	return start_dma_with_bch_irq(this, dma_channel);
 }
 
 /**
@@ -682,19 +654,13 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	struct nfc_hal       *nfc       =  this->nfc;
 	struct nfc_geometry  *nfc_geo   = &this->nfc_geometry;
 	struct mxs_dma_desc  **d        = nfc->dma_descriptors;
-	int                  dma_channel;
-	int                  error = 0;
+	int    dma_channel		= resources->dma_low_channel + chip;
 	uint32_t             command_mode;
 	uint32_t             address;
 	uint32_t             ecc_command;
 	uint32_t             buffer_mask;
 
-	/* Compute the DMA channel. */
-
-	dma_channel = resources->dma_low_channel + chip;
-
 	/* Wait for the chip to report ready. */
-
 	command_mode = BV_GPMI_CTRL0_COMMAND_MODE__WAIT_FOR_READY;
 	address      = BV_GPMI_CTRL0_ADDRESS__NAND_DATA;
 
@@ -713,7 +679,6 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	d++;
 
 	/* Enable the BCH block and read. */
-
 	command_mode = BV_GPMI_CTRL0_COMMAND_MODE__READ;
 	address      = BV_GPMI_CTRL0_ADDRESS__NAND_DATA;
 	ecc_command  = BV_GPMI_ECCCTRL_ECC_CMD__BCH_DECODE;
@@ -744,7 +709,6 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	d++;
 
 	/* Disable the BCH block */
-
 	command_mode = BV_GPMI_CTRL0_COMMAND_MODE__WAIT_FOR_READY;
 	address      = BV_GPMI_CTRL0_ADDRESS__NAND_DATA;
 
@@ -771,31 +735,11 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	(*d)->cmd.address = 0;
 
 	mxs_dma_desc_append(dma_channel, (*d));
-	d++;
-
-	/* Prepare to receive an interrupt from the BCH block. */
-
-	init_completion(&nfc->bch_done);
-
-	/* Go! */
-
-	error = gpmi_nfc_dma_go(this, dma_channel);
-
-	if (error)
-		dev_err(dev, "[%s] DMA error\n", __func__);
-
-	/* Wait for the interrupt from the BCH block. */
-
-	wait_for_completion(&nfc->bch_done);
-
-	/* Return success. */
-
-	return error;
 
+	return start_dma_with_bch_irq(this, dma_channel);
 }
 
 /* This structure represents the NFC HAL for this version of the hardware. */
-
 struct nfc_hal  gpmi_nfc_hal_v0 = {
 	.version                     = 0,
 	.description                 = "4-chip GPMI and BCH",
diff --git a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v1.c b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v1.c
index 03c9c5d..b645cc6 100644
--- a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v1.c
+++ b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v1.c
@@ -544,7 +544,6 @@ static int send_page(struct gpmi_nfc_data *this, unsigned chip,
 	struct nfc_geometry  *nfc_geo   = &this->nfc_geometry;
 	struct mxs_dma_desc  **d        = nfc->dma_descriptors;
 	int                  dma_channel;
-	int                  error = 0;
 	uint32_t             command_mode;
 	uint32_t             address;
 	uint32_t             ecc_command;
@@ -585,27 +584,8 @@ static int send_page(struct gpmi_nfc_data *this, unsigned chip,
 	(*d)->cmd.pio_words[5] = auxiliary;
 
 	mxs_dma_desc_append(dma_channel, (*d));
-	d++;
-
-	/* Prepare to receive an interrupt from the BCH block. */
-
-	init_completion(&nfc->bch_done);
-
-	/* Go! */
-
-	error = gpmi_nfc_dma_go(this, dma_channel);
-
-	if (error)
-		dev_err(dev, "[%s] DMA error\n", __func__);
-
-	/* Wait for the interrupt from the BCH block. */
-
-	wait_for_completion(&nfc->bch_done);
-
-	/* Return success. */
-
-	return error;
 
+	return start_dma_with_bch_irq(this, dma_channel);
 }
 
 /**
@@ -624,19 +604,13 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	struct nfc_hal       *nfc       =  this->nfc;
 	struct nfc_geometry  *nfc_geo   = &this->nfc_geometry;
 	struct mxs_dma_desc  **d        = nfc->dma_descriptors;
-	int                  dma_channel;
-	int                  error = 0;
+	int    dma_channel		= resources->dma_low_channel + chip;
 	uint32_t             command_mode;
 	uint32_t             address;
 	uint32_t             ecc_command;
 	uint32_t             buffer_mask;
 
-	/* Compute the DMA channel. */
-
-	dma_channel = resources->dma_low_channel + chip;
-
 	/* Wait for the chip to report ready. */
-
 	command_mode = BV_GPMI_CTRL0_COMMAND_MODE__WAIT_FOR_READY;
 	address      = BV_GPMI_CTRL0_ADDRESS__NAND_DATA;
 
@@ -655,7 +629,6 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	d++;
 
 	/* Enable the BCH block and read. */
-
 	command_mode = BV_GPMI_CTRL0_COMMAND_MODE__READ;
 	address      = BV_GPMI_CTRL0_ADDRESS__NAND_DATA;
 	ecc_command  = BV_GPMI_ECCCTRL_ECC_CMD__DECODE;
@@ -672,7 +645,6 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 		BF_GPMI_CTRL0_CS(chip)                                |
 		BF_GPMI_CTRL0_ADDRESS(address)                        |
 		BF_GPMI_CTRL0_XFER_COUNT(nfc_geo->page_size_in_bytes) ;
-
 	(*d)->cmd.pio_words[1] = 0;
 	(*d)->cmd.pio_words[2] =
 		BM_GPMI_ECCCTRL_ENABLE_ECC 	         |
@@ -686,7 +658,6 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	d++;
 
 	/* Disable the BCH block */
-
 	command_mode = BV_GPMI_CTRL0_COMMAND_MODE__WAIT_FOR_READY;
 	address      = BV_GPMI_CTRL0_ADDRESS__NAND_DATA;
 
@@ -700,7 +671,6 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 		BF_GPMI_CTRL0_CS(chip)                                |
 		BF_GPMI_CTRL0_ADDRESS(address)                        |
 		BF_GPMI_CTRL0_XFER_COUNT(nfc_geo->page_size_in_bytes) ;
-
 	(*d)->cmd.pio_words[1] = 0;
 	(*d)->cmd.pio_words[2] = 0;
 
@@ -713,27 +683,8 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	(*d)->cmd.address = 0;
 
 	mxs_dma_desc_append(dma_channel, (*d));
-	d++;
-
-	/* Prepare to receive an interrupt from the BCH block. */
-
-	init_completion(&nfc->bch_done);
-
-	/* Go! */
-
-	error = gpmi_nfc_dma_go(this, dma_channel);
-
-	if (error)
-		dev_err(dev, "[%s] DMA error\n", __func__);
-
-	/* Wait for the interrupt from the BCH block. */
-
-	wait_for_completion(&nfc->bch_done);
-
-	/* Return success. */
-
-	return error;
 
+	return start_dma_with_bch_irq(this, dma_channel);
 }
 
 /* This structure represents the NFC HAL for this version of the hardware. */
diff --git a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c
index c1c14bb..e342a89 100644
--- a/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c
+++ b/drivers/mtd/nand/gpmi-nfc/gpmi-nfc-hal-v2.c
@@ -799,7 +799,6 @@ static int send_page(struct gpmi_nfc_data *this, unsigned chip,
 	struct mxs_dma_desc  **d        = nfc->dma_descriptors;
 	struct nand_device_info  *info	= &this->device_info;
 	int    dma_channel		= resources->dma_low_channel + chip;
-	int                  error = 0;
 	uint32_t             command_mode;
 	uint32_t             address;
 	uint32_t             ecc_command;
@@ -841,21 +840,7 @@ static int send_page(struct gpmi_nfc_data *this, unsigned chip,
 
 	mxs_dma_desc_append(dma_channel, (*d));
 
-	/* Prepare to receive an interrupt from the BCH block. */
-	init_completion(&nfc->bch_done);
-
-	/* Go! */
-	error = gpmi_nfc_dma_go(this, dma_channel);
-	if (error)
-		dev_err(dev, "[%s] DMA error\n", __func__);
-
-	/* Wait for the interrupt from the BCH block. */
-	error = wait_for_completion_timeout(&nfc->bch_done,
-						msecs_to_jiffies(1000));
-	error = (!error) ? -ETIMEDOUT : 0;
-	if (error)
-		dev_err(dev, "[%s] bch timeout!!!\n", __func__);
-	return error;
+	return start_dma_with_bch_irq(this, dma_channel);
 }
 
 /**
@@ -876,7 +861,6 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	struct nand_device_info  *info	= &this->device_info;
 	struct mxs_dma_desc  **d        = nfc->dma_descriptors;
 	int    dma_channel		= resources->dma_low_channel + chip;
-	int                  error = 0;
 	uint32_t             command_mode;
 	uint32_t             address;
 	uint32_t             ecc_command;
@@ -959,23 +943,8 @@ static int read_page(struct gpmi_nfc_data *this, unsigned chip,
 	(*d)->cmd.address = 0;
 
 	mxs_dma_desc_append(dma_channel, (*d));
-	d++;
-
-	/* Prepare to receive an interrupt from the BCH block. */
-	init_completion(&nfc->bch_done);
 
-	/* Go! */
-	error = gpmi_nfc_dma_go(this, dma_channel);
-	if (error)
-		dev_err(dev, "[%s] DMA error\n", __func__);
-
-	/* Wait for the interrupt from the BCH block. */
-	error = wait_for_completion_timeout(&nfc->bch_done,
-						msecs_to_jiffies(1000));
-	error = (!error) ? -ETIMEDOUT : 0;
-	if (error)
-		dev_err(dev, "[%s] bch timeout!!!\n", __func__);
-	return error;
+	return start_dma_with_bch_irq(this, dma_channel);
 }
 
 /* This structure represents the NFC HAL for this version of the hardware. */
-- 
1.5.4.4

