From ca584c8c9c4cf3a2f667d8f9984e735b3206ef62 Mon Sep 17 00:00:00 2001
From: Terry Lv <r65388@freescale.com>
Date: Mon, 22 Nov 2010 18:54:22 +0800
Subject: [PATCH] ENGR00133918 mx50: ZQ calibration should be run only on mx50 platform

ZQ calibration is now only applied in mx50 to1.1 board.
Thus zq should be run only on mx50 to1.1 board.

Signed-off-by: Terry Lv <r65388@freescale.com>
---
 arch/arm/mach-mx5/devices.c          |    5 +++
 arch/arm/mach-mx5/devices.h          |    1 +
 arch/arm/mach-mx5/mx50_arm2.c        |    2 +
 arch/arm/mach-mx5/mx50_rdp.c         |    2 +
 arch/arm/plat-mxc/include/mach/mxc.h |    1 +
 arch/arm/plat-mxc/zq_calib.c         |   55 +++++++++++++++++++++++++++------
 6 files changed, 56 insertions(+), 10 deletions(-)

diff --git a/arch/arm/mach-mx5/devices.c b/arch/arm/mach-mx5/devices.c
index a997139..4ffc53d 100644
--- a/arch/arm/mach-mx5/devices.c
+++ b/arch/arm/mach-mx5/devices.c
@@ -1472,6 +1472,11 @@ struct platform_device mxs_dma_apbh_device = {
 	.resource = dma_apbh_resources,
 };
 
+struct platform_device mxc_zq_calib_device = {
+	.name = "mxc_zq_calib",
+	.id = -1,
+};
+
 void __init mx5_init_irq(void)
 {
 	unsigned long tzic_addr;
diff --git a/arch/arm/mach-mx5/devices.h b/arch/arm/mach-mx5/devices.h
index 83a5cd5..1d76142 100644
--- a/arch/arm/mach-mx5/devices.h
+++ b/arch/arm/mach-mx5/devices.h
@@ -91,3 +91,4 @@ extern struct platform_device mxc_rngb_device;
 extern struct platform_device dcp_device;
 extern struct platform_device pm_device;
 extern struct platform_device fixed_volt_reg_device;
+extern struct platform_device mxc_zq_calib_device;
diff --git a/arch/arm/mach-mx5/mx50_arm2.c b/arch/arm/mach-mx5/mx50_arm2.c
index 17a7596..6790886 100644
--- a/arch/arm/mach-mx5/mx50_arm2.c
+++ b/arch/arm/mach-mx5/mx50_arm2.c
@@ -1228,6 +1228,8 @@ static void __init mxc_board_init(void)
 	mxc_register_device(&mxc_rngb_device, NULL);
 	mxc_register_device(&dcp_device, NULL);
 	mxc_register_device(&fsl_otp_device, &otp_data);
+	if (cpu_is_mx50_rev(CHIP_REV_1_1) >= 1)
+		mxc_register_device(&mxc_zq_calib_device, NULL);
 }
 
 static void __init mx50_arm2_timer_init(void)
diff --git a/arch/arm/mach-mx5/mx50_rdp.c b/arch/arm/mach-mx5/mx50_rdp.c
index 13c30ea..32b69b3 100644
--- a/arch/arm/mach-mx5/mx50_rdp.c
+++ b/arch/arm/mach-mx5/mx50_rdp.c
@@ -1417,6 +1417,8 @@ static void __init mxc_board_init(void)
 	mxc_register_device(&dcp_device, NULL);
 	mxc_register_device(&mxc_powerkey_device, &pwrkey_data);
 	mxc_register_device(&fixed_volt_reg_device, &fixed_volt_reg_pdata);
+	if (cpu_is_mx50_rev(CHIP_REV_1_1) >= 1)
+		mxc_register_device(&mxc_zq_calib_device, NULL);
 	mx50_rdp_init_mc13892();
 /*
 	pm_power_off = mxc_power_off;
diff --git a/arch/arm/plat-mxc/include/mach/mxc.h b/arch/arm/plat-mxc/include/mach/mxc.h
index a2769ea..39cc8a4 100644
--- a/arch/arm/plat-mxc/include/mach/mxc.h
+++ b/arch/arm/plat-mxc/include/mach/mxc.h
@@ -204,6 +204,7 @@ extern unsigned int system_rev;
 #define cpu_is_mx31_rev(rev) cpu_rev(mx31, rev)
 #define cpu_is_mx35_rev(rev) cpu_rev(mx35, rev)
 #define cpu_is_mx37_rev(rev) cpu_rev(mx37, rev)
+#define cpu_is_mx50_rev(rev) cpu_rev(mx50, rev)
 #define cpu_is_mx51_rev(rev) cpu_rev(mx51, rev)
 #define cpu_is_mx53_rev(rev) cpu_rev(mx53, rev)
 
diff --git a/arch/arm/plat-mxc/zq_calib.c b/arch/arm/plat-mxc/zq_calib.c
index aac5097..469acaf 100644
--- a/arch/arm/plat-mxc/zq_calib.c
+++ b/arch/arm/plat-mxc/zq_calib.c
@@ -25,13 +25,16 @@
 #include <linux/io.h>
 #include <linux/delay.h>
 #include <linux/workqueue.h>
+#include <linux/platform_device.h>
 
 #include <mach/hardware.h>
 
 /* 10 secs, shall support changing this value in use-space later  */
 #define ZQ_INTERVAL	(10 * 1000)
 
-static void mxc_zq_main(void);
+static struct device *zq_calib_dev;
+
+static void mxc_zq_main(struct work_struct *dummy);
 
 /* Use workqueue */
 static struct workqueue_struct *zq_queue;
@@ -224,25 +227,36 @@ static void mxc_zq_sw_load(u32 pu, u32 pd)
 	 * The PU/PD values stored in register
 	 * DATABAHN_REG_ZQ_SW_CFG1/2 would be loaded.
 	 * */
-	data = (pd << 24) | (pu << 16);
+	data = ((pd + 1) << 24) | ((pu + 1) << 16);
 	__raw_writel(data, databahn_base + DATABAHN_REG_ZQ_SW_CFG1);
-	data = ((pd + 1) << 8) | (pu + 1);
+	data = (pd << 8) | pu;
 	__raw_writel(data, databahn_base + DATABAHN_REG_ZQ_SW_CFG2);
 
+	/* Loading PU value, set pu_pd_sel=0 */
+	__raw_writel((0x3 << 20) | (1 << 16),
+			databahn_base + DATABAHN_REG_ZQ_HW_CFG);
+	__raw_writel(0x1 << 21,
+			databahn_base + DATABAHN_REG_ZQ_HW_CFG);
+
+	/* Loading PD value, set pu_pd_sel=1 */
+	data = ((pd + 1) << 24) | ((pu + 1) << 16) | (1 << 4);
+	__raw_writel(data, databahn_base + DATABAHN_REG_ZQ_SW_CFG1);
+
 	/*
 	 * bit[21]: select software load
 	 * bit[20]: enable software load
 	 */
-	__raw_writel(0x3 << 20, databahn_base + DATABAHN_REG_ZQ_HW_CFG);
+	__raw_writel((0x3 << 20) | (1 << 16),
+			databahn_base + DATABAHN_REG_ZQ_HW_CFG);
 	/* clear for next load */
-	__raw_writel(0x0, databahn_base + DATABAHN_REG_ZQ_HW_CFG);
+	__raw_writel(0x1 << 21, databahn_base + DATABAHN_REG_ZQ_HW_CFG);
 }
 
 /*!
  * MXC ZQ interface - PU/PD calib function
  * This function Do a complete PU/PD calib and loading process.
  */
-static void mxc_zq_main(void)
+static void mxc_zq_main(struct work_struct *dummy)
 {
 	u32 pu, pd;
 
@@ -251,7 +265,7 @@ static void mxc_zq_main(void)
 	pu = mxc_zq_pu_calib(0);
 	/* Search pd value start from 0 */
 	pd = mxc_zq_pd_calib(0, pu);
-	printk("pu = %d, pd = %d\n", pu, pd);
+	dev_dbg(zq_calib_dev, "za_calib: pu = %d, pd = %d\n", pu, pd);
 	mxc_zq_hw_load(pu, pd);
 	/* or do software load alternatively */
 	/* zq_sw_load(pu, pd); */
@@ -260,22 +274,43 @@ static void mxc_zq_main(void)
 	queue_delayed_work(zq_queue, &zq_work, msecs_to_jiffies(ZQ_INTERVAL));
 }
 
-static int __init mxc_zq_calib_init(void)
+static int __devinit mxc_zq_calib_probe(struct platform_device *pdev)
 {
+	zq_calib_dev = &pdev->dev;
 	zq_queue = create_singlethread_workqueue("zq_calib");;
 	if (!zq_queue)
 		return -ENOMEM;
 
-	mxc_zq_main();
+	mxc_zq_main(NULL);
 
 	return 0;
 }
 
-static void __exit mxc_zq_calib_exit(void)
+static int __devexit mxc_zq_calib_remove(struct platform_device *pdev)
 {
 	cancel_delayed_work(&zq_work);
 	flush_workqueue(zq_queue);
 	destroy_workqueue(zq_queue);
+	return 0;
+}
+
+static struct platform_driver mxc_zq_calib_driver = {
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = "mxc_zq_calib",
+	},
+	.probe = mxc_zq_calib_probe,
+	.remove =  __exit_p(mxc_zq_calib_remove),
+};
+
+static int __init mxc_zq_calib_init(void)
+{
+	return platform_driver_register(&mxc_zq_calib_driver);
+}
+
+static void __exit mxc_zq_calib_exit(void)
+{
+	platform_driver_unregister(&mxc_zq_calib_driver);
 }
 
 module_init(mxc_zq_calib_init);
-- 
1.5.4.4

