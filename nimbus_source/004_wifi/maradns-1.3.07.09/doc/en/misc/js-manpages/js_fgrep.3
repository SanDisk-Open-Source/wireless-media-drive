.\" Process this file with
.\" groff -man -Tascii cryptday.1
.\"
.TH js_fgrep 3 "August 2000" JS "js library reference"
.\" We don't want hyphenation (it's too ugly)
.\" We also disable justification when using nroff
.hy 0
.if n .na
.SH NAME
js_fgrep \- search for the literal expression exp in the string js
.SH SYNOPSIS
.nf
.B #include "JsStr.h"
.sp
.B "int js_fgrep(js_string *exp, js_string *js)"
.fi
.SH DESCRIPTION
.B js_fgrep
searches for the expression 
.B exp
in the string
.B js.

The expression 
.B exp
is simply a string that we look for in the string 
.B js.
No characters are considered metacharacters in the expression
.B exp.
.SH "RETURN VALUE"
.B js_fgrep
returns -2 if the 
.B exp
was not found in the string
.B js,
the offset of the first found expression if the string was found (0 if it 
was found at the top of the string, 1 if it was found starting at the 
second character in the string, etc), and 
.I JS_ERROR
if there was an error when searching for the expression.
.SH EXAMPLE
The following example will find the string "345" in the string "1234567890":

.nf
	js_string *foo, *bar;
	foo = js_create(256,1);
	bar = js_create(256,1);
	js_str2js(foo,"1234567890",10,1);
	js_str2js(bar,"345",3,1);
	printf("%d\\n",js_fgrep(bar,foo)); /* You will see 2 */
.fi
.SH AUTHOR
Sam Trenholme <kiwi-zttfryb@koala.samiam.org>

