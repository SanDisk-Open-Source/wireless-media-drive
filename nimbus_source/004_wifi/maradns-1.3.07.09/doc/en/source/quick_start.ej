<HEAD>
<TITLE>MaraDNS Quick Start guide</TITLE>

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">

</HEAD>
<BODY>
<i>This guide is for experienced UNIX/Liunx/BSD users who just want to 
   quickly try out MaraDNS</i>
<p>
MaraDNS acts as both a recursive and an authoritative DNS server.  In
other words, MaraDNS can both be used to speed up the internet, and/or
serve domains that you may have.
<p>

To try out MaraDNS as a recursive nameserver is easy:
<ul>

<li>Compile MaraDNS.  Type in './configure; make' in the 
  top-level MaraDNS directory.
  Note: No need to compile if you downloaded a binary RPM or Debian package.

<li>Take the file server/maradns and place it in /usr/local/sbin

<li> Take the file tools/duende and place it in /usr/local/sbin

<li>Create an empty directory called /etc/maradns

<li>Create a mararc file.  This file only needs to be three lines long
    on systems with a /dev/urandom file, and four lines long on older
    operating systems without /dev/urandom
<p>
     Here is a sample mararc file:
<pre>
	ipv4_bind_addresses = "127.0.0.1"
	chroot_dir = "/etc/maradns"
	recursive_acl = "127.0.0.1"
</pre>
     This mararc file says that MaraDNS will have the ip "127.0.0.1" (this
     is the bind_address), run from the directory /etc/maradns (the chroot_dir
     value), and only allow the ip "127.0.0.1" to make recursive queries (the
     recursive_acl value).

<li>Place the mararc file in the location /etc/mararc on your system.

<li>Run MaraDNS as a non-daemon: 
<blockquote>
<pre>
	/usr/local/sbin/maradns
</pre>
</blockquote>
Since MaraDNS needs to bind to a privileged port (port 53), it needs
to start up running as root.  MaraDNS is designed with security in mind, and
will drop root privileges before being visible to the public internet.

<li>Test MaraDNS in another window or virtual terminal
     
<blockquote>
<pre>
	dig @127.0.0.1 www.yahoo.com
</pre>
</blockquote>

<li>In order to make the duende daemonizing tool usable, create a directory
    named /etc/maradns/logger/

<blockquote>
<pre>
	mkdir /etc/maradns/logger
</pre>
</blockquote>

<li>If this works, make MaraDNS run as a daemon:

<blockquote>
<pre>
	/usr/local/sbin/duende /usr/local/sbin/maradns
</pre>
</blockquote>

     duende is a tool that daemonizes maradns; the daemonizer is a separate
     program.

<li>If this all works, install MaraDNS:
<blockquote>
<pre>
	make install
</pre>
</blockquote>
</ul>
<p>

It is also possible to set up MaraDNS as both an authoritative and recursive
name server with the same IP:

<ul>
<li>Here is the MaraRC file:
<pre>
	ipv4_bind_addresses = "127.0.0.1"
	chroot_dir = "/etc/maradns"
	recursive_acl = "127.0.0.1"
	csv2 = {}
	csv2["example.com."] = "db.example.com"
</pre>
<li>Have a zone file named db.example.com in the <tt>chroot_dir</tt> 
    (<tt>/etc/maradns</tt> above) that looks like this:
<pre>
example.com. 10.1.2.3
</pre>
    (Yes, experienced DNS admins, you can have SOA, NS, MX, SRV, and any other
     kind of DNS data stored in a csv2 zone file.  Read the csv2 man page for
     details)
<li>Recurisve queries will be resolved normally
<li>Queries for <tt>example.com</tt> will resolve to 10.1.2.3
<li>Any other 
<tt>name.example.com</tt> query will return a "this host does not exist"
DNS reply.
</ul>

Look in doc (in particular, the tutorial), or read the relevant man 
pages for more information on how to set up MaraDNS.
<p>

</ul>

</body>
