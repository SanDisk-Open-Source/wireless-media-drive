#!/bin/sh -e

# This script updates MaraDNS 1.3

# To run this script, make sure that this script is in the directory
# containing the tarball for the version of MaraDNS you wish to update, and
# all of the patches are in a directory entitled 'patches'.

# For example, to update MaraDNS 1.3.02 to 1.3.03, make sure 
# maradns-1.3.02.tar.lzma is in the same directory as this script, and
# that the directory containing this script has a directory called
# "patches/" which has all of the maradns-1.2.02*.patch files.

# You will need to have lzma 4.27 on your system to run this script
# Do not use a newer version of lzma; the flags changed

# Get the current and next version number

CURRENT=${0%%-*}
CURRENT=${CURRENT##*/}
NEXT=${0##*-}

# The revision number; in the case of having multiple snapshots a day,
# the revision number can be incremented so as to minimize confusion
# This is only done when more than one snapshop is uploaded to the
# maradns.org server in a given day.
REVISION=.1

# Make a clean CURRENT install, which we rename NEXT
rm -fr maradns-$CURRENT 2> /dev/null
rm -fr maradns-$NEXT 2> /dev/null
echo extracting tarball
cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
if [ $? != 0 ] ; then
	echo run this from the correct directory
	exit 1
fi
rm -fr maradns-$NEXT*
mv maradns-$CURRENT maradns-$NEXT
cd maradns-$NEXT

# The patches

mkdir update/$NEXT
cp ../patches/maradns-$CURRENT* update/$NEXT

# This is one of the few places where we will need to change anything
# in this script from version to version

echo applying patches

# Patch #1: Update TODO.1.3 file
patch -p1 < update/$NEXT/maradns-1.3.07.03-todo.patch

# Patch #2: Remove compile-time warnings when compiling in MinGW32
patch -p1 < update/$NEXT/maradns-1.3.07.03-mingw_warnings.patch

# Patch #3: Clarify some things in the README for the SQA regressions
patch -p1 < update/$NEXT/maradns-1.3.07.03-regressions_readme.patch

# Patch #4: Documentation update:
# 1) Add example mararc file to zoneserver man page
# 2) Fix dangling link in tutorial index page
# 3) Makefile for tutorial did not correctly update zoneserver man page
patch -p1 < update/$NEXT/maradns-1.3.07.03-doc_update.patch

# Patch #5: Contributed by Joerg Sonnenberger; this helps MaraDNS work in
# DragonflyBSD
patch -p1 < update/$NEXT/maradns-1.3.07.03-zoneserver.patch

# Patch #6: Another Brandon Holbrook fix; this one fixes the
# install.sh script (which really should be rewritten to be
# distro/*NIX agnostic, but that's another story)
patch -p1 < update/$NEXT/maradns-1.3.07.03-install_sh.patch

# Patch #7: Update the tests so we can have all of the tests run by a 
#           single script 
patch -p1 < update/$NEXT/maradns-1.3.07.03-tests.patch

# Patch #8: Fix long-standing bug where a CNAME record would be improperly
#           rotated if a NS request was sent to a record that was a CNAME
patch -p1 < update/$NEXT/maradns-1.3.07.03-improper_rotation.patch

# Patch: Update RPM spec file (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-rpm_spec.patch
mv build/maradns-$CURRENT.spec build/maradns-$NEXT.spec

# Patch: Update changelog (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-changelog.patch

# Patch: Update download link (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-download.patch

# Other release-specific fixes and changes go here

# Add new regressions
cd sqa/regressions
tar xjf ../../../newfiles/bad_query.tar.bz2
tar xjf ../../../newfiles/star_handling_2.tar.bz2
tar xjf ../../../newfiles/noat_parse_bug.tar.bz2
tar xjf ../../../newfiles/percent_parse_bug.tar.bz2
tar xjf ../../../newfiles/zoneserver_doc.tar.bz2
tar xjf ../../../newfiles/improper_rotation.tar.bz2

# Update tests

# Add metatest to do all the other tests
cp ../../../newfiles/do.tests .

# Update README files; some tests do not have README files 
head -9 README > foo
mv foo README
for a in ../../../newfiles/README.* ; do
	cp $a ${a##*README.}/README
done

# Update output.success files
for a in ../../../newfiles/output.success.* ; do
	cp $a ${a##*output.success.}/output.success
done

cd ../..

# Make sure tutorial directory has index.html file
cd doc/en/tutorial
ln -s tutorial.html index.html
ln -s tutorial.html 00index.html
cd ../../..

# Anything below this line normally is not changed between MaraDNS versions
echo updating documentation

# Update the documentation
cd doc/en
make
cd man
make
# The following is time-consuming, so we only do it when making the final
# tarballs
if [ "$1" = "go" ] || [ "$1" = "snap" ] ; then
	echo making PDF reference
	./make.pdf
	echo done
fi
cd ../examples
make
cd ../tutorial
make
cd ../text
make
cd ../webpage
make
# Go back to the maradns dir
cd ../../..

rm CHANGELOG
ln -s doc/en/changelog.txt CHANGELOG

# Go one level higher than the toplevel directory to copy this script
# over
cd ..

# Put this script in the "build" directory
cp $0 maradns-$NEXT/update/$NEXT

if [ "$1" != "go" ] && [ "$1" != "snap" ] && [ "$1" != "work" ] ; then
	echo OK, maradns-$NEXT built.  Confirm this compiles and	
	echo perform basic regression before re-running this to make
	echo the tarballs.  Once you have tested this, rerun this 
	echo script as: \"$0 go\" or as \"$0 snap\" 
        echo to make a daily snapshot
	exit 0
fi

if [ "$1" = "work" ] ; then
	cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
	echo OK, both maradns-$CURRENT and maradns-$NEXT made\; you
	echo now can make more patches as needed.  
	exit 0
fi

# Build the tarballs
echo making new tarballs

if [ "$1" = "snap" ] ; then
	SNAP=Q.$( date +%Y%m%d )$REVISION
	rm -fr maradns-$SNAP
	mv maradns-$NEXT maradns-$SNAP
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	exit 0
else
	SNAP=$NEXT
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	tar czf maradns-$SNAP.tar.gz maradns-$SNAP

	# All of the compression we actually use was originally written by 
	# Igor Pavlov for the 7-zip compression suite
	echo shrinking .gz tarball
	advdef -z -4 maradns-$SNAP.tar.gz
fi

echo using exotic compression
tar cf maradns-$SNAP.tar maradns-$SNAP

echo lzma compression \(this will take about 5 minutes\)
date
# To decompress: cat file.tar.lzma | lzma d -si -so | tar xvf -
# -d20 makes the file almost as small as -d22, but uses 1/4 of the memory
# (only a little over one meg needed for decompression)
lzma e maradns-$SNAP.tar maradns-$SNAP.tar.lzma -a2 -d20 -fb255
date
echo

# Clean up the uncompressed tarball
rm maradns-$SNAP.tar

exit 0

# The other exotic compressors can't be run in a pipeline

echo 7zip compression
date
7za a maradns-$SNAP.tar.7z maradns-$SNAP.tar
date
echo

echo paq6 compression \(This will take 2\-3 minutes\)
date
paq6v2 -2 maradns-$SNAP.tar.pq6 maradns-$SNAP.tar
date
echo

echo rzip compression
date
rzip maradns-$SNAP.tar
date
echo
