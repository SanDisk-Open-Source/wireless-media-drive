#!/bin/bash -e

# This script updates MaraDNS 1.2

# To run this script, make sure that this script is in the directory
# containing the tarball for the version of MaraDNS you wish to update, and
# all of the patches are in a directory entitled 'patches'.

# For example, to update MaraDNS 1.2.02 to 1.2.03, make sure 
# maradns-1.2.02.tar.lzma is in the same directory as this script, and
# that the directory containing this script has a directory called
# "patches/" which has all of the maradns-1.2.02*.patch files.

# You will need to have lzma on your system to run this script

# Get the current and next version number

CURRENT=${0%%-*}
CURRENT=${CURRENT##*/}
NEXT=${0##*-}

# Make a clean CURRENT install, which we rename NEXT
rm -fr maradns-$CURRENT 2> /dev/null
rm -fr maradns-$NEXT 2> /dev/null
echo extracting tarball
cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
if [ $? != 0 ] ; then
	echo run this from the correct directory
	exit 1
fi
rm -fr maradns-$NEXT*
mv maradns-$CURRENT maradns-$NEXT
cd maradns-$NEXT

# The patches

mkdir update/$NEXT
cp ../patches/maradns-$CURRENT* update/$NEXT

# This is one of the few places where we will need to change anything
# in this script from version to version

# The revision number; in the case of having multiple snapshots a day,
# the revision number can be incremented so as to minimize confusion
# This is only done when more than one snapshop is uploaded to the
# maradns.org server in a given day.
REVISION=.1

echo applying patches

# Patch #1: Vlatko Kosturjak from Croatia's chkconfig changes
patch -p1 < update/$NEXT/maradns-1.2.11-chkconfig.patch

# Patch #2: Add documentation about making MaraDNS a Windows XP service
patch -p1 < update/$NEXT/maradns-1.2.11-win_service.patch

# Patch #3: Add function which removs last record from DNS packet; this will
# be used to improve truncation, and to remove a compression error we get when
# we can't get the PTR with the recursive resolver.
patch -p1 < update/$NEXT/maradns-1.2.11-fancy_truncation.patch

# Patch #4: Close zone file descriptors after reading the zone file (thanks
# Paul Wankadia for pointing this out)
patch -p1 < update/$NEXT/maradns-1.2.11-csv2_close.patch

# Patch #5: Have a special '/serial' field which one can put in the SOA serial
# field if one wishes to have the serial updated whenever a zone file is
# edited
patch -p1 < update/$NEXT/maradns-1.2.11-slash_serial.patch

# Patch #6: Implement (and document) a special '/ttl' slash command that allows
# the default TTL to be changed in a zone file
patch -p1 < update/$NEXT/maradns-1.2.11-default_ttl.patch

# Patch #7: Implement (and document) a special '/origin' slash command that
# allows the default "origin" (string used to substitute %) to be changed
patch -p1 < update/$NEXT/maradns-1.2.11-origin.patch

# Patch #8: Plug a memory leak the code has had for a while (since 1.1.50 and
# 1.0.33); basically we'd leak about 300 bytes every time we ask for a 
# PTR address, the PTR address pointed to a CNAME, and the CNAME didn't 
# point to a valid PTR record
patch -p1 < update/$NEXT/maradns-1.2.11-ptrq_memleak.patch

# Patch #9: Add support for /opush {name} and /opop commands; this allows
# more flexibility in changing origins
patch -p1 < update/$NEXT/maradns-1.2.11-opush.patch

# Patch #10: Make sure we deallocate unused data while parsing zone files;
# this should help reduce MaraDNS memory usage on setups with a lot of zones
patch -p1 < update/$NEXT/maradns-1.2.11-tidy_parse.patch

# Patch #11: An origin is not the zone and vice versa
patch -p1 < update/$NEXT/maradns-1.2.11-origin_vs_zone.patch

# Patch #12: Data in the authoritative half, with the exception of NS
# delegations, is always marked authoritative in the DNS header
patch -p1 < update/$NEXT/maradns-1.2.11-always_authoritative.patch

# Patch #13: Point out that people may be able to get help with 1.0
# on the MaraDNS mailing list
patch -p1 < update/$NEXT/maradns-1.2.11-maillist_help.patch

# Patch #14: Add the '/read' slash command to csv2 zone files
patch -p1 < update/$NEXT/maradns-1.2.11-slash_read.patch

# Patch: Update RPM spec file (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-rpm_spec.patch
mv build/maradns-$CURRENT.spec build/maradns-$NEXT.spec

# Patch: Update changelog (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-changelog.patch

# Patch: Update download link (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-download.patch

# Other release-specific fixes and changes go here
# Copy over the document on making MaraDNS a win32 service
cp ../win_service.ej doc/en/source
cd sqa
tar xvjf ../../roottest.tar.bz2
cp /etc/maradns/db.example.net roottest
cp /etc/maradns/db.test01.maradns roottest
cp /etc/maradns/testfile roottest
cd ..

# Anything below this line normally is not changed between MaraDNS versions
echo updating documentation

# Update the documentation
cd doc/en
make
cd man
make
# The following is time-consuming, so we only do it when making the final
# tarballs
if [[ "$1" == "go" || "$1" == "snap" ]] ; then
	echo making PDF reference
	./make.pdf
	echo done
fi
cd ../tutorial
make
cd ../text
make
cd ../webpage
make
# Go back to the maradns dir
cd ../../..

rm CHANGELOG
ln -s doc/en/changelog.txt CHANGELOG

# Go one level higher than the toplevel directory to copy this script
# over
cd ..

# Put this script in the "build" directory
cp $0 maradns-$NEXT/update/$NEXT

if [[ "$1" != "go" && "$1" != "snap" && "$1" != "work" ]] ; then
	echo OK, maradns-$NEXT built.  Confirm this compiles and	
	echo perform basic regression before re-running this to make
	echo the tarballs.  Once you have tested this, rerun this 
	echo script as: \"$0 go\" or as \"$0 snap\" 
        echo to make a daily snapshot
	exit 0
fi

if [ "$1" == "work" ] ; then
	cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
	echo OK, both maradns-$CURRENT and maradns-$NEXT made\; you
	echo now can make more patches as needed.  
	exit 0
fi

# Build the tarballs
echo making new tarballs

if [ "$1" == "snap" ] ; then
	SNAP=Q.$( date +%Y%m%d )$REVISION
	rm -fr maradns-$SNAP
	mv maradns-$NEXT maradns-$SNAP
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	exit 0
else
	SNAP=$NEXT
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	tar czf maradns-$SNAP.tar.gz maradns-$SNAP

	# All of the compression we actually use was originally written by 
	# Igor Pavlov for the 7-zip compression suite
	echo shrinking .gz tarball
	advdef -z -3 maradns-$SNAP.tar.gz
fi

echo using exotic compression
tar cf maradns-$SNAP.tar maradns-$SNAP

echo lzma compression \(this will take about 5 minutes\)
date
# To decompress: cat file.tar.lzma | lzma d -si -so | tar xvf -
# -d20 makes the file almost as small as -d22, but uses 1/4 of the memory
# (only a little over one meg needed for decompression)
lzma e maradns-$SNAP.tar maradns-$SNAP.tar.lzma -a2 -d20 -fb255
date
echo

# Clean up the uncompressed tarball
rm maradns-$SNAP.tar

exit 0

# The other exotic compressors can't be run in a pipeline

echo 7zip compression
date
7za a maradns-$SNAP.tar.7z maradns-$SNAP.tar
date
echo

echo paq6 compression \(This will take 2\-3 minutes\)
date
paq6v2 -2 maradns-$SNAP.tar.pq6 maradns-$SNAP.tar
date
echo

echo rzip compression
date
rzip maradns-$SNAP.tar
date
echo
