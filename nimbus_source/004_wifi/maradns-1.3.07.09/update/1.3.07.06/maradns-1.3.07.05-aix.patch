--- maradns-1.3.07.05/configure	2006-05-15 18:28:36.000000000 -0500
+++ maradns-1.3.07.06/configure	2007-10-01 07:54:43.000000000 -0500
@@ -105,6 +105,11 @@
 	echo It looks like you are using Cygwin\; this should compile fine
 	echo by typing in \'make\'.
 	EXITCODE=0
+elif echo $UNAME | grep -i AIX > /dev/null ; then
+	cat $BUILDDIR/Makefile.AIX >> Makefile
+	echo It looks like you are using AIX\; this should compile fine
+	echo by typing in \'make\'.
+	EXITCODE=0
 elif echo $UNAME | grep -i darwin > /dev/null ; then
 	cat $BUILDDIR/Makefile.darwin >> Makefile
 	cp $BUILDDIR/install.darwin $BUILDDIR/install.locations
--- maradns-1.3.07.06/build/Makefile.AIX.orig	2007-10-01 08:02:34.000000000 -0500
+++ maradns-1.3.07.06/build/Makefile.AIX	2007-10-01 07:59:33.000000000 -0500
@@ -23,7 +23,7 @@
 # LDFLAGS=-L/usr/ucblib -lucb -lxnet
 # end the Solaris section
 # Non-Solaris version of "M"
-M="CC=$(CC) -O2 -Wall" DEBUG=-DNO_FLOCK 
+M="CC=$(CC) -O2 -Wall -DNO_FLOCK" DEBUG=-DNO_FLOCK 
 V="VERSION=$(VERSION)"
 
 # Debug
--- maradns-1.3.07.06/qual/qual_timestamp.c.orig	2007-10-01 08:05:10.000000000 -0500
+++ maradns-1.3.07.06/qual/qual_timestamp.c	2007-10-01 08:00:42.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002-2005 Sam Trenholme
+/* Copyright (c) 2002-2007 Sam Trenholme
  *
  * TERMS
  *
@@ -35,7 +35,7 @@
                       when the 32-bit time() call gives us -1 in 2106 */
 
 #ifndef AUTHONLY
-pthread_mutex_t time_lock = PTHREAD_MUTEX_INITIALIZER;
+pthread_mutex_t qtime_lock = PTHREAD_MUTEX_INITIALIZER;
 #endif
 
 /* Give an application a timestamp in a non-blocking manner */
@@ -43,11 +43,11 @@
 qual_timestamp qual_get_time() {
     qual_timestamp ttime;
 #ifndef AUTHONLY
-    pthread_mutex_lock(&time_lock);
+    pthread_mutex_lock(&qtime_lock);
 #endif
     ttime = the_time;
 #ifndef AUTHONLY
-    pthread_mutex_unlock(&time_lock);
+    pthread_mutex_unlock(&qtime_lock);
 #endif
     return ttime;
     }
@@ -100,11 +100,11 @@
              }
          }
 #ifndef AUTHONLY
-    pthread_mutex_lock(&time_lock);
+    pthread_mutex_lock(&qtime_lock);
 #endif
      the_time = ttime;
 #ifndef AUTHONLY
-    pthread_mutex_unlock(&time_lock);
+    pthread_mutex_unlock(&qtime_lock);
 #endif
      return JS_SUCCESS;
      }
