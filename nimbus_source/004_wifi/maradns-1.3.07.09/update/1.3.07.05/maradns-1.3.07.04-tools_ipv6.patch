--- maradns-1.3.07.04/tools/askmara.c	2007-06-29 14:32:31.000000000 -0500
+++ maradns-1.3.08/tools/askmara.c	2007-09-17 16:51:21.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002-2007 Sam Trenholme
+/* Copyright (c) 2002-2007 Sam Trenholme 
  *
  * TERMS
  *
@@ -156,6 +156,10 @@
 int main(int argc, char **argv) {
     char *server_address = NULL;
     struct sockaddr_in dns_udp;
+    struct sockaddr_in *pdns_udp = &dns_udp;
+#ifdef AUTHONLY
+    struct sockaddr_in6 dns_udp6;
+#endif
     int len_inet; /* Length */
     int s; /* Socket */
     js_string *outdata; /* Outgoing data */
@@ -218,9 +222,6 @@
        harderror(L_JS_CREATE_OUTDATA);
     if((question.qname = js_create(512,1)) == 0)
        harderror(L_JS_CREATE_QNAME);
-    /* Create a UDP client socket */
-    if((s = socket(AF_INET,SOCK_DGRAM,0)) == -1)
-        harderror(L_SOCKET);
 
     /* Create a socket address to use with sendto() */
     memset(&dns_udp,0,sizeof(dns_udp));
@@ -232,9 +233,37 @@
     dns_udp.sin_port = htons(DNS_PORT);
     if((dns_udp.sin_addr.s_addr = inet_addr(server_address)) == INADDR_NONE)
         harderror(L_MAL_IP);
-
     len_inet = sizeof(dns_udp);
 
+    /* Create a UDP client socket */
+    if((s = socket(AF_INET,SOCK_DGRAM,0)) == -1)
+#ifndef AUTHONLY
+        harderror(L_SOCKET);
+#else
+    {
+        /* the address is not a valid IPv4 Address, try with IPv6 */
+        memset(&dns_udp6,0,sizeof(dns_udp6));
+        dns_udp6.sin6_family = AF_INET6;
+        dns_udp6.sin6_port = htons(DNS_PORT);
+        if( inet_pton(AF_INET6, server_address, &dns_udp6.sin6_addr) < 0) {
+            harderror(L_MAL_IP);
+            }
+        else {
+           len_inet = sizeof(dns_udp6);
+           pdns_udp = (struct sockaddr_in*)&dns_udp6;
+           close(s);
+           if((s = socket(AF_INET6,SOCK_DGRAM,0)) == -1)
+                harderror(L_SOCKET);
+            }
+        }
+    else {
+        len_inet = sizeof(dns_udp);
+        pdns_udp = (struct sockaddr_in*)&dns_udp;
+        if((s = socket(AF_INET,SOCK_DGRAM,0)) == -1)
+            harderror(L_SOCKET);
+        }
+#endif
+
     id = gen_id(argv[1 + verbose_mode]);
     /* Format a DNS request */
     /* DNS header */
@@ -308,7 +337,7 @@
     do {
         /* Send out a DNS request */
         if(sendto(s,outdata->string,outdata->unit_count,0,
-          (struct sockaddr *)&dns_udp,len_inet) < 0)
+          (struct sockaddr *)pdns_udp,len_inet) < 0)
            harderror(L_UDP_NOSEND); /* Unable to send UDP packet */
 
         /* Wait for a reply from the DNS server */
@@ -323,7 +352,7 @@
         if(n == 0) /* Timeout */
             harderror("Timeout");
         if((count = recvfrom(s,indata->string,indata->max_count,0,
-                        (struct sockaddr *)&dns_udp,
+                        (struct sockaddr *)pdns_udp,
                         (socklen_t *)&len_inet)) < 0)
             harderror(L_DNS_R_ERROR); /* Problem getting DNS server response */
 
@@ -720,6 +749,22 @@
                L_DOT,*(uindata->string + *place + 2),
                L_DOT,*(uindata->string + *place + 3));
         }
+    else if(rr_hdr.type == RR_AAAA) {
+        unsigned short *p;
+        if(uindata->unit_count < *place + 16)
+            return JS_ERROR;
+        /* Display the IP of the data */
+        p = (unsigned short*)(uindata->string + *place);
+        printf(" +%u aaaa %x:%x:%x:%x:%x:%x:%x:%x\n", rr_hdr.ttl,
+                   htons(*(p + 0 )),
+                   htons(*(p + 1)),
+                   htons(*(p + 2)),
+                   htons(*(p + 3)),
+                   htons(*(p + 4)),
+                   htons(*(p + 5)),
+                   htons(*(p + 6)),
+                   htons(*(p + 7)));
+        }
     else if(rr_hdr.type == RR_TXT) {
         int len,p;
 	len = rr_hdr.rdlength;
--- maradns-1.3.07.04/tcp/fetchzone.c	2007-05-21 06:37:55.000000000 -0500
+++ maradns-1.3.08/tcp/fetchzone.c	2007-09-17 16:52:17.000000000 -0500
@@ -57,10 +57,14 @@
 /* Usage: getzone <zone name> <zone server IP> */
 
 int main(int argc, char **argv) {
-    int sock, preference;
-    int len_inet, length, place, result;
+    int sock = 0, preference = 0;
+    int len_inet = 0, length = 0, place = 0, result = 0;
     int soa_count = 0;
     struct sockaddr_in zone_server; /* AF_INET */
+#ifdef AUTHONLY
+    struct sockaddr_in6 zone_server6; /* AF_INET6 */
+#endif
+    struct sockaddr_in *pzone_server = &zone_server;
     js_string *send, *zone, *get, *expand, *mxexpand; 
     /* ( Sending and getting data from the client ) */
     q_header header;
@@ -91,18 +95,29 @@
     zone_server.sin_port = htons(53);
     zone_server.sin_addr.s_addr = inet_addr(argv[2]);
 
-    if(zone_server.sin_addr.s_addr == INADDR_NONE)
-        harderror(L_VALID_IP); /* "Please use a valid IP for the zone server" */
-
-    len_inet = sizeof zone_server;
-
-    /* Create a TCP/IP socket */
-    sock = socket(PF_INET,SOCK_STREAM,0);
-    if(sock == -1)
-        harderror(L_NO_SOCK); /* "Unable to create TCP socket" */
+    if(zone_server.sin_addr.s_addr == INADDR_NONE) {
+#ifdef AUTHONLY
+        memset(&zone_server6,0,sizeof(zone_server6));
+        zone_server6.sin6_family = AF_INET6;
+        zone_server6.sin6_port   = htons(53);
+        if( inet_pton(AF_INET6, argv[2], &zone_server6.sin6_addr) < 0) {
+            harderror(L_VALID_IP);
+        } else {
+           len_inet = sizeof(zone_server6);
+           pzone_server = (struct sockaddr_in*)&zone_server6;
+           if((sock = socket(AF_INET6,SOCK_STREAM,0)) == -1)
+               harderror(L_NO_SOCK);
+        }
+#endif
+    } else {
+        len_inet = sizeof(zone_server);
+        pzone_server = (struct sockaddr_in*)&zone_server;
+        if((sock = socket(AF_INET,SOCK_STREAM,0)) == -1)
+            harderror(L_NO_SOCK);
+    }
 
     /* Connect to the zone server */
-    if(connect(sock,(struct sockaddr *)&zone_server,len_inet) == -1)
+    if(connect(sock,(struct sockaddr *)pzone_server,len_inet) == -1)
         harderror(L_NO_CONNECT); /* "Unable to connect to zone server" */
 
     /* OK, create a query to send over the connection */
@@ -158,6 +173,7 @@
     /* Question formed, now send question to server */
     len[0] = (send->unit_count & 0xff00) >> 8;
     len[1] = send->unit_count & 0xff;
+
     if(write(sock,len,2) == -1)
         harderror(L_SEND_2BYTE); /* "Could not send 2-byte length header to zone server" */
     if(write(sock,send->string,send->unit_count) == -1)
@@ -171,7 +187,7 @@
         harderror(L_RNAME); /* "Could not create soa.rname" */
 
     while(recv(sock,len,2,MSG_WAITALL) == 2) {
-
+;
         /* Get the length of the reply from the server */
         length = ((len[0] << 8) & 0xff00) | (len[1] & 0xff);
 
@@ -186,7 +202,6 @@
 
         if((length = recv(sock,get->string,length,MSG_WAITALL)) == -1)
             harderror(L_SERVER); /* "Could not get packet from server" */
-
         get->unit_count = length;
 
         /* Decompress that */
@@ -310,6 +325,24 @@
 		           *(get->string + 1),*(get->string + 2), 
 			   *(get->string + 3));
                     break;
+                case RR_AAAA:
+                    {
+                    unsigned short *p;
+                    if(get->unit_count != 16)
+                        goto failover;
+                    if(hname_translate(rr.name,RR_AAAA) == JS_ERROR)
+                        harderror(L_TRANS); /* "Problem translating AAAA record name" */
+                    rr.name->string++;
+                    rr.name->unit_count--;
+                    safe_esc_stdout(rr.name);
+                    rr.name->string--;
+                    rr.name->unit_count++;
+                    p = (unsigned short *)get->string;
+                    printf(" +%u aaaa %x:%x:%x:%x%x:%x:%x:%x: ~ \n",rr.ttl,
+                           htons(*(p)), htons(*(p + 1)),htons(*(p + 2)), htons(*(p + 3)), 
+                           htons(*(p + 4)), htons(*(p + 5)), htons(*(p + 6)), htons(*(p +7)));
+                    }
+                    break;
                 case RR_MX:
 		    if(get->unit_count < 3)
 		        goto failover;
