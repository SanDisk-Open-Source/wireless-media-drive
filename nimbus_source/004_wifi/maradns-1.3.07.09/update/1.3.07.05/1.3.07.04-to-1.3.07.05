#!/bin/sh -e

# This script updates MaraDNS 1.3

# To run this script, make sure that this script is in the directory
# containing the tarball for the version of MaraDNS you wish to update, and
# all of the patches are in a directory entitled 'patches'.

# For example, to update MaraDNS 1.3.02 to 1.3.03, make sure 
# maradns-1.3.02.tar.lzma is in the same directory as this script, and
# that the directory containing this script has a directory called
# "patches/" which has all of the maradns-1.2.02*.patch files.

# You will need to have lzma 4.27 on your system to run this script
# Do not use a newer version of lzma; the flags changed

# Get the current and next version number

CURRENT=${0%%-*}
CURRENT=${CURRENT##*/}
NEXT=${0##*-}

# The revision number; in the case of having multiple snapshots a day,
# the revision number can be incremented so as to minimize confusion
# This is only done when more than one snapshop is uploaded to the
# maradns.org server in a given day.
REVISION=.1

# Make a clean CURRENT install, which we rename NEXT
rm -fr maradns-$CURRENT 2> /dev/null
rm -fr maradns-$NEXT 2> /dev/null
echo extracting tarball
cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
if [ $? != 0 ] ; then
	echo run this from the correct directory
	exit 1
fi
rm -fr maradns-$NEXT*
mv maradns-$CURRENT maradns-$NEXT
cd maradns-$NEXT

# The patches

mkdir update/$NEXT
cp ../patches/maradns-$CURRENT* update/$NEXT

# This is one of the few places where we will need to change anything
# in this script from version to version

echo applying patches

# Patch #1: Update TODO file
patch -p1 < update/$NEXT/maradns-1.3.07.04-todo.patch

# Patch #2: Update advocacy webpage
patch -p1 < update/$NEXT/maradns-1.3.07.04-advocacy.patch

# Patch #3: Update security webpage
patch -p1 < update/$NEXT/maradns-1.3.07.04-security.patch

# Patch #4: Add bind2csv2 manpage
patch -p1 < update/$NEXT/maradns-1.3.07.04-bind2csv2-manpage.patch

# Patch #5: Update authoritative tutorial to point out that one can now
#           have custom nameservers for subtrees of the recursive DNS space
patch -p1 < update/$NEXT/maradns-1.3.07.04-auth-tutorial.patch

# Patch #6: Add some more SQA regressions
patch -p1 < update/$NEXT/maradns-1.3.07.04-newtests.patch

# Patch #7: Update SQA README file to point out, yes, you need to compile
# MaraDNS first
patch -p1 < update/$NEXT/maradns-1.3.07.04-testdoc.patch

col -x < parse/ParseMaraRc.c > foo
mv foo parse/ParseMaraRc.c
# Patch #8: Add "future" dictionary variable to mararc files
patch -p1 < update/$NEXT/maradns-1.3.07.04-future.patch

# Patch #9: Up the default maximum allocable memory when using
#            recursion (threads are memory pigs)
patch -p1 < update/$NEXT/maradns-1.3.07.04-maxmem_up.patch

# Patch #10: Daniel's update to maraconf.sh
patch -p1 < update/$NEXT/maradns-1.3.07.04-maraconf.update.patch

# Patch #11: Have it possible to compile MaraDNS as an authoritative-only
#            DNS server again
patch -p1 < update/$NEXT/maradns-1.3.07.04-authonly.compile.patch

# Patch #12: Update ej2txt file to give better-looking text versions
#            of documents
patch -p1 < update/$NEXT/maradns-1.3.07.04-ej2txt.patch
# Remove .txt files so they get regenerated by improved ej2txt
rm doc/en/text/*txt
rm doc/en/*txt

# Patch #13: Remove a bit of sloppy coding in Csv2_rr_wks.c
patch -p1 < update/$NEXT/maradns-1.3.07.04-sloppy.patch

# Patch #14: Yes, RFC3403 also mentions NAPTR
patch -p1 < update/$NEXT/maradns-1.3.07.04-naptr_rfc.patch

# Patch #15: Update FAQ
patch -p1 < update/$NEXT/maradns-1.3.07.04-faq.patch

# Patch #16: Update "last updated" on index.html page
patch -p1 < update/$NEXT/maradns-1.3.07.04-lastupdate.patch

# Patch: Update RPM spec file (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-rpm_spec.patch
mv build/maradns-$CURRENT.spec build/maradns-$NEXT.spec

# Patch: Update changelog (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-changelog.patch

# Patch: Update download link (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-download.patch

# Other release-specific fixes and changes go here

# Some scripts that make it easier for me to make a new MaraDNS release
# I think the buzzword-compliant description is "release engineering scripts"
cp ../newfiles/make.download.embed tools/misc/
cp ../newfiles/do.gpg.sigs tools/misc/

# Add bind2csv2.py man page
cp ../newfiles/bind2csv2-man.ej doc/en/source

# Note that the sqa regressions scripts are not POSIX compliant in a way
# that doesn't matter in the real world
cp ../newfiles/README.posix sqa/regressions

# Cruft removal

# Remove the pdf of the manpage (I don't think anyone actually uses this, and
# it makes the MaraDNS tarball about 100k larger)
rm doc/en/pdf/manpage_reference.pdf

# Remove cruft in tools
# Tools to change C flags with old build process
rm tools/change.flags
rm tools/g.flags
rm tools/go2.flags

# Old tool for keeping track of memleaks (this has been changed to use
# make debug)
rm tools/leak.change

# Old tool for making function prototypes so we can quickly add prototypes
# to -Wall generates no warnings
rm tools/make.function.prototypes

# Old tool for making sure we remove literals given to printf (We don't use
# i18n code in MaraDNS, so this is a non-issue)
rm tools/move.literals

# Another old l10n piece of code I haven't used in years
rm tools/only.quotes

# An old tool that removes the possibly cryptographic RNG code; I don't think
# any significant industrialized country has "no crypto" laws anymore
rm tools/remove.rng

# An old tool that helped me figure out why a given hostname was not
# resolving
rm tools/debug.hostname
rm tools/debug.hostname.old

# An old tool from the days I used AbiWord 1.0 to write MaraDNS documentation
rm tools/misc/abiword.html.massage

# An old tool for learning words in the Spanish language 
rm tools/misc/drill 
rm tools/misc/example_wordlist

# Old tools for making manpages (from the days when I wrote the man pages in
# raw *off)
rm tools/misc/fix.manpages
rm tools/misc/faq2man

# old undocumented tool for seeing what gethostbyname call did
rm tools/misc/gethostname.pl

# old tool for converting HTML to ascii (I now just use links -dump in the
# ej2txt script)
rm tools/misc/html2ascii

# Old tool for splitting up a patch in to its hunks
rm tools/misc/hunksplit.pl

# Old tool for converting ls -lar format into a more find/du format
rm tools/misc/lslarproc

# Old tool for converting MaraDNS 1.0 timestampe into more human-friendly
# format (non-issue now that we use duende)
rm tools/misc/timestamp.convert

# Remove cruft in doc/en/misc
# Remove text advocacy documents; this is now part of the webpage
rm -fr doc/en/misc/advocacy

# Remove document on bind2csv2.py design; the script has now been written
rm doc/en/misc/bind2csv2.design

# Remove document on cache poison protection (I may use this doc when
# writing maracache, however)
rm doc/en/misc/cache.poison.protection

# Remove documents on the new-in-2002 compression/decompression code (we
# just use it and it just works and hasn't, knock on wood, had a bug since
# 2005)
rm -fr doc/en/misc/compression

# Removed never-implemented post-1.2 csv2 ideas
rm -fr doc/en/misc/csv2-1.4-ideas

# Removed document on how RRs are stored in cache
rm doc/en/misc/how.maradns.stores.rrs

# Removed doc on how to support SQL; SQL freaks can use MyDNS or PowerDNS
rm doc/en/misc/how.to.support.sql

# Remove documentation on *roff -man macros; we just use ej2man to make
# man pages and have done so since 2002
rm -fr doc/en/misc/man_macros

# Remove ideas on private RRs; I'm actually trying to follow the standards
# and can't think of any reason why I should do this
rm doc/en/misc/private_rrs.*

# Remove ideas on making recursion case insensitive while allowing one to
# sometimes have upper case and lower case hostnamed be different.  I tried
# to do this; it was a hornet nest of bugs
rm doc/en/misc/recursive-case-insensitive

# Remove 2001 doc on how we authoritatively resolve a hostname
rm doc/en/misc/resolution.algorithm

# Remove 2002 notes on RFC1034
rm doc/en/misc/rfc1034.notes.abw

# Remove 2001 notes on RFC1035 compliance
rm doc/en/misc/RFC1035.compliance

# Remove SQA test which I don't think I have used in a while
rm sqa/regression.generator

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# OK, that ends the cruft removal.  Let's now add some cool stuff

# Add SQA tests to make sure every single mararc dictionary variable works
# as advertised
cd sqa/regressions
tar xjf ../../../newfiles/mararc_dictionary_variables_tests.tar.bz2
cd ../..

# Anything below this line normally is not changed between MaraDNS versions
echo updating documentation

# Convert tabs in code to spaces, since this is inconsistant in different
# programs
if false ; then
	for a in $( find . -type f -name \*.[ch] ) ; do 
		col -x < $a > foo
		mv foo $a
	done
fi

# Update the documentation
cd doc/en
make
cd man
make
# The following is time-consuming, so we only do it when making the final
# tarballs
# Disabled: We will no longer have a PDF of the man pages pre-made
#if [ "$1" = "go" ] || [ "$1" = "snap" ] ; then
#	echo making PDF reference
#	./make.pdf
#	echo done
#fi
cd ../examples
make
cd ../tutorial
make
cd ../text
make
cd ../webpage
make
# Go back to the maradns dir
cd ../../..

rm CHANGELOG
ln -s doc/en/changelog.txt CHANGELOG

# Go one level higher than the toplevel directory to copy this script
# over
cd ..

# Put this script in the "build" directory
cp $0 maradns-$NEXT/update/$NEXT

if [ "$1" != "go" ] && [ "$1" != "snap" ] && [ "$1" != "work" ] ; then
	echo OK, maradns-$NEXT built.  Confirm this compiles and	
	echo perform basic regression before re-running this to make
	echo the tarballs.  Once you have tested this, rerun this 
	echo script as: \"$0 go\" or as \"$0 snap\" 
        echo to make a daily snapshot
	exit 0
fi

if [ "$1" = "work" ] ; then
	cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
	echo OK, both maradns-$CURRENT and maradns-$NEXT made\; you
	echo now can make more patches as needed.  
	exit 0
fi

# Build the tarballs
echo making new tarballs

if [ "$1" = "snap" ] ; then
	SNAP=Q.$( date +%Y%m%d )$REVISION
	rm -fr maradns-$SNAP
	mv maradns-$NEXT maradns-$SNAP
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	exit 0
else
	SNAP=$NEXT
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	tar czf maradns-$SNAP.tar.gz maradns-$SNAP

	# All of the compression we actually use was originally written by 
	# Igor Pavlov for the 7-zip compression suite
	echo shrinking .gz tarball
	advdef -z -4 maradns-$SNAP.tar.gz
fi

echo using exotic compression
tar cf maradns-$SNAP.tar maradns-$SNAP

echo lzma compression \(this will take about 5 minutes\)
date
# To decompress: cat file.tar.lzma | lzma d -si -so | tar xvf -
# -d20 makes the file almost as small as -d22, but uses 1/4 of the memory
# (only a little over one meg needed for decompression)
lzma e maradns-$SNAP.tar maradns-$SNAP.tar.lzma -a2 -d20 -fb255
date
echo

# Clean up the uncompressed tarball
rm maradns-$SNAP.tar

exit 0

# The other exotic compressors can't be run in a pipeline

echo 7zip compression
date
7za a maradns-$SNAP.tar.7z maradns-$SNAP.tar
date
echo

echo paq6 compression \(This will take 2\-3 minutes\)
date
paq6v2 -2 maradns-$SNAP.tar.pq6 maradns-$SNAP.tar
date
echo

echo rzip compression
date
rzip maradns-$SNAP.tar
date
echo
