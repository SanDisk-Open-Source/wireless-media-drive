#!/bin/sh -e

# This script updates MaraDNS 1.3

# To run this script, make sure that this script is in the directory
# containing the tarball for the version of MaraDNS you wish to update, and
# all of the patches are in a directory entitled 'patches'.

# For example, to update MaraDNS 1.3.02 to 1.3.03, make sure 
# maradns-1.3.02.tar.lzma is in the same directory as this script, and
# that the directory containing this script has a directory called
# "patches/" which has all of the maradns-1.2.02*.patch files.

# You will need to have lzma 4.27 on your system to run this script
# Do not use a newer version of lzma; the flags changed

# Get the current and next version number

CURRENT=${0%%-*}
CURRENT=${CURRENT##*/}
NEXT=${0##*-}

# The revision number; in the case of having multiple snapshots a day,
# the revision number can be incremented so as to minimize confusion
# This is only done when more than one snapshop is uploaded to the
# maradns.org server in a given day.
REVISION=.1

# Make a clean CURRENT install, which we rename NEXT
rm -fr maradns-$CURRENT 2> /dev/null
rm -fr maradns-$NEXT 2> /dev/null
echo extracting tarball
cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
if [ $? != 0 ] ; then
	echo run this from the correct directory
	exit 1
fi
rm -fr maradns-$NEXT*
mv maradns-$CURRENT maradns-$NEXT
cd maradns-$NEXT

# The patches

mkdir update/$NEXT
#cp ../patches/maradns-$CURRENT* update/$NEXT
# Since the 1.3.07.XX and post-1.3.07 1.3 releases are somewhat parallel,
# the two branches will share patches for a while, with the post-1.3.07
# features and chanfes only applied to that branch
cp ../patches/maradns* update/$NEXT

# This is one of the few places where we will need to change anything
# in this script from version to version

echo applying patches

# Patch #1: Fix bug where MaraDNS did not correctly echo the rd bit the
#           client sent us (This doesn't cover all of the corner cases yet)
patch -p1 < update/$NEXT/maradns-1.3.07.06-rd_val.patch

# Patch #2: Make it so the RA bit in the header (Which should never have
#           been made part of the DNS spec) is cleared when sending an
#           authoritative answer, and set when sending a recursive 
#           answer (Some crappy embedded DNS resolvers actually check this 
#           bit).  Thanks to Jan Hrdonka for the bug report.
patch -p1 < update/$NEXT/maradns-1.3.07.06-ra_value.patch

# Patch #3: Allow there to be CSV2 zone files with nothing but
#           SOA and NS records.  Again, thanks to Jan Hrdonka for the
#           bug report
patch -p1 < update/$NEXT/maradns-1.3.07.06-blank_zone.patch

# Patch #4: One of the ICANN root servers has just changed
patch -p1 < update/$NEXT/maradns-1.3.07.06-root_server_update.patch

# Update RPM spec file (We now have a script make the .spec file)
rm build/maradns-$CURRENT.spec
tools/misc/make.maradns.spec $NEXT > build/maradns-$NEXT.spec

# Patch: Update changelog (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-changelog.patch

# Patch: Update download link (this is always done)
patch -p1 < update/$NEXT/maradns-$CURRENT-download.patch

# Other release-specific fixes and changes go here

# Add "rd_val" SQA test to make sure the RD bit is correctly echoed
cd sqa/regressions
tar xjf ../../../newfiles/rd_val.tar.bz2
# Add "blank_zone" SQA test to make sure a blank zone is OK
tar xjf ../../../newfiles/blank_zone.tar.bz2
cd ../..

# Anything below this line normally is not changed between MaraDNS versions

# Convert tabs in code to spaces, since this is inconsistant in different
# programs
echo removing tabs from source files
if true ; then
	for a in $( find . -type f -name \*.[ch] ) ; do 
		col -x < $a > foo
		mv foo $a
	done
fi

echo updating documentation
# Update the documentation
cd doc/en
make
cd man
make
cd ../examples
make
cd ../tutorial
make
cd ../text
make
cd ../webpage
../../../tools/misc/make.download.embed > download.embed
make
# Go back to the maradns dir
cd ../../..

rm CHANGELOG
ln -s doc/en/changelog.txt CHANGELOG

# Go one level higher than the toplevel directory to copy this script
# over
cd ..

# Put this script in the "build" directory
cp $0 maradns-$NEXT/update/$NEXT

if [ "$1" != "go" ] && [ "$1" != "snap" ] && [ "$1" != "work" ] ; then
	echo OK, maradns-$NEXT built.  Confirm this compiles and	
	echo perform basic regression before re-running this to make
	echo the tarballs.  Once you have tested this, rerun this 
	echo script as: \"$0 go\" or as \"$0 snap\" 
        echo to make a daily snapshot
	exit 0
fi

if [ "$1" = "work" ] ; then
	cat maradns-$CURRENT.tar.lzma | lzma d -si -so | tar xf -
	echo OK, both maradns-$CURRENT and maradns-$NEXT made\; you
	echo now can make more patches as needed.  
	exit 0
fi

# Build the tarballs
echo making new tarballs

if [ "$1" = "snap" ] ; then
	SNAP=Q.$( date +%Y%m%d )$REVISION
	rm -fr maradns-$SNAP
	mv maradns-$NEXT maradns-$SNAP
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	exit 0
else
	SNAP=$NEXT
	tar cjf maradns-$SNAP.tar.bz2 maradns-$SNAP
	tar czf maradns-$SNAP.tar.gz maradns-$SNAP

	# All of the compression we actually use was originally written by 
	# Igor Pavlov for the 7-zip compression suite
	echo shrinking .gz tarball
	advdef -z -4 maradns-$SNAP.tar.gz
fi

echo using exotic compression
tar cf maradns-$SNAP.tar maradns-$SNAP

echo lzma compression \(this will take about 5 minutes\)
date
# To decompress: cat file.tar.lzma | lzma d -si -so | tar xvf -
# -d20 makes the file almost as small as -d22, but uses 1/4 of the memory
# (only a little over one meg needed for decompression)
lzma e maradns-$SNAP.tar maradns-$SNAP.tar.lzma -a2 -d20 -fb255
date
echo

# Clean up the uncompressed tarball
rm maradns-$SNAP.tar

exit 0

# The other exotic compressors can't be run in a pipeline

echo 7zip compression
date
7za a maradns-$SNAP.tar.7z maradns-$SNAP.tar
date
echo

echo paq6 compression \(This will take 2\-3 minutes\)
date
paq6v2 -2 maradns-$SNAP.tar.pq6 maradns-$SNAP.tar
date
echo

echo rzip compression
date
rzip maradns-$SNAP.tar
date
echo
