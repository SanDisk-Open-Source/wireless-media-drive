--- maradns-1.3.05/parse/ParseMaraRc.c.orig	2007-05-21 04:58:09.000000000 -0500
+++ maradns-1.3.05/parse/ParseMaraRc.c	2007-05-21 05:04:30.000000000 -0500
@@ -31,7 +31,7 @@
 
 /* Keywords that are non-dictionary strings in Mara's rc file */
 
-#define KEYCOUNT 53
+#define KEYCOUNT 54
 
 char *keywords[KEYCOUNT] = {
         "bind_address", /* IPv4 Addresses to bind to (old name) */
@@ -138,6 +138,8 @@
                                   * resolver will bind to */
         "recurse_number_ports", /* The number of ports the recursive resolver
                                  * is allowed to bind to */
+        "max_mem", /* The maximum amount of memory we allow MaraDNS to
+                    * allocate, in kilobytes */
         "zone_transfer_acl" /* ACL of IPs allowed to perform zone transfers */
         };
 
--- maradns-1.3.05/server/MaraDNS.c.orig	2007-05-21 04:58:53.000000000 -0500
+++ maradns-1.3.05/server/MaraDNS.c	2007-05-21 06:07:20.000000000 -0500
@@ -62,6 +62,15 @@
 #include "timestamp.h"
 #include "read_kvars.h"
 
+/* Virutal memory limit */
+#ifdef RLIMIT_AS
+#define MAX_MEM RLIMIT_AS
+#else /* RLIMIT_AS */
+#ifdef RLIMIT_VMEM
+#define MAX_MEM RLIMIT_VMEM
+#endif /* RLIMIT_VMEM */
+#endif /* RLIMIT_AS */
+
 /* Our global variables */
 mhash *bighash;
 int log_level = 1; /* 0: No messages except for fatal errors which stop
@@ -134,6 +143,8 @@
 int recurse_delegation = 0; /* Whether MaraDNS will recurse when we would
                              * otherwise give out a NS delegation entry */
 
+int dns_records_served = 0; /* The number of DNS records we are serving */
+
 /* A list of who is and who is not allowed to make recursive DNS queries */
 ipv4pair recurse_acl[512];
 /* A list of the ipv4 IP addresses we bind MaraDNS to (the netmask portion is
@@ -4407,6 +4418,13 @@
 #endif /* RLIMIT_NPROC */
 #endif /* DARWIN */
 #endif /* MINGW32 */
+ 
+    /* Determine how many elements the cache can have */
+    cache_size = read_numeric_kvar("maximum_cache_elements",1024);
+    if(cache_size < 32 || cache_size > 268435455) /* 2^28 - 1 */ {
+        mlog(L_INVALID_CACHESIZE);
+        cache_size = 1024;
+        }
 
     /* Determine the level of error reporting */
     log_level = read_numeric_kvar("verbose_level",1);
@@ -4519,13 +4537,6 @@
     /* Whether to supress dangling CNAME warnings */
     no_cname_warnings = read_numeric_kvar("no_cname_warnings",0);
 
-    /* Determine how many elements the cache can have */
-    cache_size = read_numeric_kvar("maximum_cache_elements",1024);
-    if(cache_size < 32 || cache_size > 268435455) /* 2^28 - 1 */ {
-        mlog(L_INVALID_CACHESIZE);
-        cache_size = 1024;
-        }
-
     verbose_query = read_numeric_kvar("verbose_query",0);
 
     /* Get the values for the synthetic SOA serial and the synthetic SOA
@@ -4953,6 +4964,38 @@
     /* populate_main uses qual timestamps for the csv2 zone files */
     qual_set_time();
     value = populate_main(bighash,errors,recursion_enabled);
+    if(dns_records_served > 0) {
+        printf("MaraDNS proudly serves you %d DNS records\n",
+               dns_records_served);
+        }
+
+    /* Limit the amount of memory we can use */
+#ifdef MAX_MEM
+    /* Limit the maximum amount of memory we can allocate, in
+     * bytes */
+    maxprocs = read_numeric_kvar("max_mem",
+               1048576 + ((cache_size + dns_records_served) * 1536));
+    if(maxprocs < 262144 && maxprocs > 0) { maxprocs = 262144; }
+    if(maxprocs > 0) {
+      rlim.rlim_cur = rlim.rlim_max = maxprocs;
+      if(setrlimit(MAX_MEM,&rlim) != 0) {
+	if(errno == ENOSYS) {
+	    printf(
+      "WARNING: Your system does not allow setting memory allocation limits!");
+            }
+        else {
+            harderror("Unable to set memory allocation limits");
+            }
+       } else {
+            printf("MaraDNS maximum memory allocation set to %d bytes\n",
+                   maxprocs);
+            }
+     }
+#else /* MAX_MEM */
+     printf(
+      "WARNING: Your system does not allow setting memory allocation limits!");
+#endif /* MAX_MEM */
+
     /* If we have one or more elements in the cache, we will need to look
      * through the cache for elements (default_dos_level, in this context,
      * allows us to save time when doing just recursive queries by not 
--- maradns-1.3.05/doc/en/source/mararc.ej.orig	2007-05-21 05:15:45.000000000 -0500
+++ maradns-1.3.05/doc/en/source/mararc.ej	2007-05-21 06:05:22.000000000 -0500
@@ -682,6 +682,16 @@
 available in a DNS reply.
 
 <p> The default value for this variable is 20.
+
+<h2>max_mem</h2>
+
+max_mem is the maximum amount of memory we allow MaraDNS to allocate,
+in bytes. <p>
+
+The default value of this is to allocate 1 megabyte for MaraDNS' general
+use, and in addition, to allocate 1536 bytes for each element we
+can have in the cache or DNS record that we are authoritatively serving.  
+
 <h2>min_ttl</h2>
 min_ttl: The minimum amount of time a resource record will stay in
 MaraDNS' cache, regardless of the TTL the remote server specifies.
--- maradns-1.3.05/doc/en/source/update.ej.orig	2007-05-21 05:25:58.000000000 -0500
+++ maradns-1.3.05/doc/en/source/update.ej	2007-05-21 06:10:35.000000000 -0500
@@ -305,5 +305,23 @@
 <pre>
 bind_star_handling = 0
 </pre>
+
+<h3>max_mem</h3>
+
+<tt>max_mem</tt> determined the maximum amount of memory MaraDNS is allowed
+to allocate.  This is a numeric variable, and the value is in kilobytes.
+The default value of this is to allocate 1 megabyte for MaraDNS' general
+use, and in addition, to allocate 1536 bytes for each element we
+can have in the cache or DNS record that we are authoritatively serving.  
+
+<p>
+
+If, for whatever reason, you wish to disable this feature, add the following
+lint to your <tt>mararc</tt> file:
+
+<pre>
+max_mem = 0
+</pre>
+
 </BODY></HTML>
 
--- maradns-1.3.05/server/MaraBigHash.c.orig	2007-05-21 05:43:43.000000000 -0500
+++ maradns-1.3.05/server/MaraBigHash.c	2007-05-21 05:47:06.000000000 -0500
@@ -48,6 +48,7 @@
 
 extern int log_level;
 extern int no_cname_warnings;
+extern int dns_records_served;
 int cname_warnings_shown = 0;
 
 
@@ -1292,6 +1293,9 @@
     if(qtype == 251 /* IXFR */ || qtype == 252 /* AXFR */) 
         return JS_ERROR;
 
+    /* Increment the number of DNS records we are serving */
+    dns_records_served++;
+
     /* See if the data is authoritative or not */
     /* Change the type so the two strings are the same */
     if(change_rtype(zone,qtype) == JS_ERROR) {
--- maradns-1.3.04/tcp/getzone.c	2006-12-21 02:34:46.000000000 -0600
+++ maradns-1.3.05/tcp/getzone.c	2007-05-21 05:56:39.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002,2003 Sam Trenholme
+/* Copyright (c) 2002-2007 Sam Trenholme
  *
  * TERMS
  *
@@ -40,6 +40,7 @@
 int no_cname_warnings = 1; /* So we can link to MaraBigHash.o */
 int csv2_tilde_handling = 0; /* For some reason, we link to the
                               * csv2 parser */
+int dns_records_served = 0; /* This is used by MaraDNS.c */
 
 void harderror(char *why) {
     printf("%s%s%s%s",LF,L_FATAL_COMMENT,why,LF); /* "\n", "# Fatal error: ", why, "\n" */
--- maradns-1.3.04/tcp/fetchzone.c	2006-12-21 02:34:46.000000000 -0600
+++ maradns-1.3.05/tcp/fetchzone.c	2007-05-21 05:55:02.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002-2006 Sam Trenholme
+/* Copyright (c) 2002-2007 Sam Trenholme
  *
  * TERMS
  *
@@ -43,6 +43,7 @@
 int no_cname_warnings = 1; /* So we can link to MaraBigHash.o */
 int csv2_tilde_handling = 0; /* For some reason, we link to the
                               * csv2 parser */
+int dns_records_served = 0; /* Used by MaraDNS.c */
 
 void harderror(char *why) {
     printf("%s%s%s%s",LF,L_FATAL_COMMENT,why,LF); /* "\n", "# Fatal error: ", why, "\n" */
--- maradns-1.3.04/tcp/zoneserver.c	2006-12-21 02:34:46.000000000 -0600
+++ maradns-1.3.05/tcp/zoneserver.c	2007-05-21 05:54:20.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002-2006 Sam Trenholme and Albert Lee
+/* Copyright (c) 2002-2007 Sam Trenholme and Albert Lee
  *
  * TERMS
  *
@@ -70,6 +70,8 @@
 int csv2_tilde_handling = 2;
 /* And another global variable: How much logging we do */
 int verbose = 0;
+/* Placeholder; dns_records_served is used by MaraDNS.c */
+int dns_records_served = 0;
 /* The last global variable: The IP of the UDP server we forward queries
    to */
 int udp_forward_server = 0;
