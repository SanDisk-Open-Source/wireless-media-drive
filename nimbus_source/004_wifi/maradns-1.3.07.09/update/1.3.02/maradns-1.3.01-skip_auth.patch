*** maradns-1.3.01/server/MaraBigHash.c	2006-08-14 13:02:07.000000000 -0700
--- maradns-1.3.02/server/MaraBigHash.c	2007-01-02 00:56:38.000000000 -0800
***************
*** 1,4 ****
! /* Copyright (c) 2002-2006 Sam Trenholme
   *
   * TERMS
   *
--- 1,4 ----
! /* Copyright (c) 2002-2007 Sam Trenholme
   *
   * TERMS
   *
***************
*** 1076,1082 ****
     AR section (AN section with CNAMEs)
     Input: A pointer to the hash to populate, a pointer to the string to
            put an error message in
!    Output: JS_ERROR on error, -2 on non-fatal error, JS_SUCCESS on success
   */
  
  int add_an(mhash *bighash, js_string *error) {
--- 1076,1084 ----
     AR section (AN section with CNAMEs)
     Input: A pointer to the hash to populate, a pointer to the string to
            put an error message in
!    Output: JS_ERROR on error, -2 on non-fatal error, JS_SUCCESS when there
!            is one or more authoritative records, 0 when there are no
!            authoritative records
   */
  
  int add_an(mhash *bighash, js_string *error) {
*** maradns-1.3.02/server/MaraDNS.c.orig	2007-01-01 23:55:41.000000000 -0800
--- maradns-1.3.02/server/MaraDNS.c	2007-01-02 00:59:40.000000000 -0800
***************
*** 1,4 ****
! /* Copyright (c) 2002-2006 Sam Trenholme
   *
   * TERMS
   *
--- 1,4 ----
! /* Copyright (c) 2002-2007 Sam Trenholme
   *
   * TERMS
   *
***************
*** 2992,2997 ****
--- 2992,2998 ----
                                 allocated */
      struct sockaddr_in *z; /* Makes certain ugly declarations readable */
  
+ 
      /* Sanity checks */
      if(js_has_sanity(raw) == JS_ERROR)
          return JS_SUCCESS;
***************
*** 3101,3107 ****
          goto serv_fail;
          }
  
!     /* Here, we handle AAAA queries */
      if(qtype == 28 && reject_aaaa != 0) {
  	    udpnotfound(ra_data,header.id,sock,0,origq,0,
  			    desires_recursion,ect,2);
--- 3102,3108 ----
          goto serv_fail;
          }
  
!     /* We may reject AAAA queries */
      if(qtype == 28 && reject_aaaa != 0) {
  	    udpnotfound(ra_data,header.id,sock,0,origq,0,
  			    desires_recursion,ect,2);
***************
*** 3132,3137 ****
--- 3133,3145 ----
          goto serv_fail;
  #endif
  
+     /* We go straight to processing this as a recursive query at a
+      * dos_protection_level of 78; this is the default value of
+      * dos_protection_level if neither csv1 nor csv2 is set */
+     if(dos_protection_level == 78 ) {
+   	    goto recursive_call;
+     }
+ 
      /* We don't process RR_ANY records if dos_protection_level is greater
       * than 13 */
      if(dos_protection_level > 13) {
***************
*** 3678,3683 ****
--- 3686,3693 ----
  	return JS_SUCCESS;
          }
  
+ recursive_call:
+ 
      /* If we do not have authority for this record... */
      if(have_authority == 0 && default_zonefile_enabled != 1) {
          /* Ask other DNS servers for RRs which we do not have authoity
***************
*** 4110,4115 ****
--- 4120,4127 ----
  #endif /* MINGW32 */
  #endif /* DARWIN */
      int have_ipv6_address = 0;
+     int default_dos_level = 78; /* 78: Recursive-only; 0: default when
+                                  * there is one or more zonefiles */
  
      memset(&client,0,sizeof(client)); /* Initialize ya variables */
      clin = (struct sockaddr_in *)&client;
***************
*** 4529,4538 ****
      /* Set the debug_msg_level to the Debug message level they want */
      debug_msg_level = read_numeric_kvar("debug_msg_level",1);
  
-     /* Set the dos_protection_level to see if we disable some features
-      * to protect us from a denial of service attack. */
-     dos_protection_level = read_numeric_kvar("dos_protection_level",0);
- 
  #ifndef MINGW32
      /* Determine if we are root */
  #ifndef __CYGWIN__
--- 4541,4546 ----
***************
*** 4742,4747 ****
--- 4750,4764 ----
      /* populate_main uses qual timestamps for the csv2 zone files */
      qual_set_time();
      value = populate_main(bighash,errors,recursion_enabled);
+     default_dos_level = 78; /* No authoritative records in cache */
+     if(value == JS_SUCCESS) {
+ 	default_dos_level = 0;
+     }
+ 
+     /* Set the dos_protection_level to see if we disable some features
+      * to protect us from a denial of service attack. */
+     dos_protection_level = 
+ 	read_numeric_kvar("dos_protection_level",default_dos_level);
  
      if(value == JS_ERROR)
          harderror(L_NOPOPULATE); /* "Error running populate_main program" */
*** maradns-1.3.01/doc/en/source/mararc.ej	2006-12-21 00:34:46.000000000 -0800
--- maradns-1.3.02/doc/en/source/mararc.ej	2007-01-02 07:39:32.000000000 -0800
***************
*** 474,483 ****
  <li>A dos_protection_level of 14 or above disables ANY record processing
  
  <li>A dos_protection_level of 18 or above disables star record processing
!     at the beginning of hostnames (default_zonefiles still work, however)
  
  </ul>
  
  <h2>ipv6_bind_address</h2>
  If MaraDNS is compiled with as an authoritative server, then this 
  variable will tell MaraDNS which ipv6 address for the UDP server to; 
--- 474,489 ----
  <li>A dos_protection_level of 14 or above disables ANY record processing
  
  <li>A dos_protection_level of 18 or above disables star record processing
!     at the beginning of hostnames (default zonefiles still work, however)
! 
! <li>A dos_protection_level of 78 disables all authoritative processing,
!     including default zonefiles; recursive lookups still work.
  
  </ul>
  
+ The default level of dos_protection_level is 0 when there are one or more
+ zonefiles; 78 when there are no zone files.
+ 
  <h2>ipv6_bind_address</h2>
  If MaraDNS is compiled with as an authoritative server, then this 
  variable will tell MaraDNS which ipv6 address for the UDP server to; 
