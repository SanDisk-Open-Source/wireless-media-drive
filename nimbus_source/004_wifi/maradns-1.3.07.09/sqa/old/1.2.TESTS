 
* Documentation testing and update

  - Make sure the documentation page makes clear that MaraDNS is a 
    complete name server.

  - Have some advocacy for MaraDNS on the documentation page

  - Have patch file which works around ej2man bugs

  - Make sure all example configurations (both the examples and any 
    examples in man pages) work.

* zoneserver testing

  1. Make sure that the askmara output for each record in a csv1 zone gives
     the same data a fetchzone on that zone generates.

     1a) Have a zone; run fetchzone on it.  This is file A. (DONE)

     1b) For each record in that zone, run askmara for the record in 
         question.   Concatenate all of these outputs in to a single
         large file. This is file B (DONE)

     1c) Compare file A and file B.  If they are different fix askmara or
         the csv2 parser as needed (we really want to keep the csv1 parser
         bug for bug identical to the 1.0.xx parser). (DONE 1.1.55: Some
         askmara fixes)

  2. Make sure that the askmara output for each record in a csv2 zone gives
     the same data a fetchzone on that zone generates.

     2a) Have a zone; run fetchzone on it.  This is file A.

     2b) For each record in that zone, run askmara for the record in 
         question.   Concatenate all of these outputs in to a single
         large file. This is file B.

     2c) Compare file A and file B.  If they are different fix askmara or
         the csv2 parser as needed. (DONE 1.1.55)

* BUGFIX: Have fetchzone convert dnames to lowercase. (DONE; it was all 
          one line of code since fold_case was already in the tcp libraries,
          unused, I put it there to have MaraDNS compile)

* TEST: Make sure that we have the correct definition for each and every
        RR type described in the decompression/compression code

	Here are all of the RRs support in this part of the code:

	1|A		RFC 1035 (Good)
	15|MX		RFC 1035 (Good)
	6|SOA		RFC 1035 (Good)
	12|PTR		RFC 1035 (Good)
	16|TXT		RFC 1035 (Good)
	5|CNAME		RFC 1035 (Good)
	3|MD		RFC 1035 (Obsolete: BIND refuses to load)
	4|MF		RFC 1035 (Obsolete: BIND refuses to load)
	7|MB		RFC 1035 (Good)
	8|MG		RFC 1035 (Good)
	9|MR		RFC 1035 (Good)
	14|MINFO	RFC 1035 (BAD RR desc; corrected for 1.1.55)
	17|RP		RFC 1035 (Good)
	18|AFSDB	RFC 1183 (Good)
	21|RT		RFC 1183 (Good)
	33|SRV		RFC 2052 (Good)

	The testing procedure will consist of making a BIND zone file with
        each and every one of these records, and making sure Mara can
        grok each record in the zone file. (DONE 1.1.55: MD and MF are
        untestable; only minfo was bad)

* TEST: Make sure each and every documented Mararc variable parses 
        in both zoneserver and maradns:

	Dictionary variables:

		csv2
		csv1
		ipv4_alias
		root_servers
		upstream_servers

	Normal (string) variables:

		ipv4_bind_addresses
		bind_address
		chroot_dir	
		csv2_default_zonefile
		csv2_synthip_list
		debug_msg_level
		default_rrany_set
		dos_protection_level
		ipv6_bind_address
		hide_disclaimer
		long_packet_ipv4
		maradns_uid
		maradns_gid
		maximum_cache_elements
		maxprocs
		max_ar_chain
		max_chain
		max_glueless_level
		max_queries_total
		max_tcp_procs
		max_total
		min_ttl
		min_ttl_cname
		no_fingerprint
		random_seed_file
		recursive_acl
		spammers
		synth_soa_origin
		synth_soa_serial
		tcp_convert_acl
		tcp_convert_server
		timeout_seconds
		timestamp_type
		verbose_level
		zone_transfer_acl

  (DONE; I have some recursive mararc files which work with most of
   the above variables set at the same time)

* BUGFIX: Inform the user when we can not open a given csv2 zonefile 
  (probably not a bug) (NOTBUG)

* BUGFIX: askmara's SOA and RAW output (DONE)

* DOCFIX: "fi" problem with PDF manpage reference (How can I fix this??)

* Proper removal of non-authoritative host when authoritative host with same
  name exists (DONE; looks Good)

* Recursive resolving of 10,000 names, followed by recursive resolving 
  of 10,000 names multiple times w/o MaraDNS crashing nor using 
  significantly more memory (We actually use franky.hosts.test for this)


