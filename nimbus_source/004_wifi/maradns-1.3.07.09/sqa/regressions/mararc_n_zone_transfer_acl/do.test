#!/bin/sh

# This test to make sure the csv2 dictionary variable works

for LEVEL in 127.0.0.1/16 10.99.99.99/24 ; do

kill $( ps auxw | grep -v grep | grep zoneserver | awk '{print $2}' ) \
	> /dev/null 2>&1

sleep 50 # Linux kernel bug; takes a while to release port
cat > mararc << EOF
chroot_dir="$( pwd )"
ipv4_bind_addresses="127.0.0.1"
csv2 = {}
csv2["example.net."] = "db.example.net"
zone_transfer_acl = "${LEVEL}"
EOF

cat > db.example.net << EOF
# This is an example csv2 zone file

# First of all, csv2 zone files do not need an SOA record; however, if
# one is provided, we will make it the SOA record for our zone
# The SOA record needs to be the first record in the zone if provided
# This is a commented out record and disabled.

% 	SOA	% email@% 1 7200 3600 604800 1800 ~

# Second of all, csv2 zone files do not need authoritative NS records.
# If they aren't there, MaraDNS will synthesize them, based on the IP
# addresses MaraDNS is bound to.  (She's pretty smart about this; if
# Mara is bound to both public and private IPs, only the public IPs will
# be synthesized as NS records)


% 	NS 	a.% ~
%	NS	b.% ~

# Here are some A (ipv4 address) records; since this is the most
# common field, the zone file format allows a compact representation
# of it.
a.example.net. 	10.10.10.10 ~
# Here, you can see that a single name, "b.example.net." has multiple IPs
# This can be used as a primitive form of load balancing; MaraDNS will
# rotate the IPs so that first IP seen by a DNS client changes every time
# a query for "b.example.net." is made
b.example.net.  10.10.10.11 ~
b.example.net.  10.10.10.12 ~

# We can have the label in either case; it makes no difference
Z.EXAMPLE.NET. 	10.2.3.4 ~
Y.EXAMPLE.net.  10.3.4.5 ~

# We can use the percent shortcut.  When the percent shortcut is present,
# it indicates that the name in question should terminate with the name
# of the zone we are processing.
percent.%	a 		10.9.8.7 ~

# And we can have star records
#*.example.net.  A		10.11.12.13 ~

# We can have a ttl in a record; however the ttl needs a '+' before it:
# Note that the ttl has to be in seconds, and is before the RTYPE
d.example.net. +86400 A 10.11.12.13 ~

f.example.net. # As you can see, records can span multiple lines
        	A 	10.2.19.83 ~

# This allows well-commented records, like this:
c.example.net. 		# Our C class machine
        +86400  	# This record is stored for one day
        A       	# A record
        10.1.1.1 	# Where we are 
        ~               # End of record

# We can even have something similiar to csv1 if we want...
e.example.net.|+86400|a|10.2.3.4|~
h.example.net.|a|10.9.8.7|~
# Here, we see we can specify the ttl but not the rtype if desired
g.example.net.|+86400|10.11.9.8|~

# Here is a MX record
% mx 10 mail.% ~
mail.% +86400 IN A 10.22.23.24 ~

# We even have a bit of ipv6 support
# (Commented out because 1.3.07 and 1.3.08 parse this differently)
#a.example.net. 		aaaa 	3ffe:ffff:1:2:3::4:f ~

# Not to mention support for SRV records
_http._tcp.%    srv   0 0 80 a.% ~

# TXT records, naturally
example.net.    txt 'This is some text' ~

# Starting with MaraDNS 1.2.08, there is also support for SPF records,
# which are identical to TXT records.  See RFC4408 for more details.
example.net.    spf 'v=spf1 +mx a:colo.example.com/28 -all' ~

# Some other unusual and exotic record types

example.net. RAW 40 \x10\x01\x02'Kitchen sink'\x40' data' ~

example.net. HINFO 'Intel Pentium III';'CentOS Linux 3.7' ~
example.net. WKS 10.1.2.3 6 22,80,119 ~
example.net. MD a.example.net. ~
example.net. MF b.example.net. ~
example.net. MB mail.example.net. ~
example.net. MG mg@example.net. ~
example.net. MINFO rm@example.net. re@example.net. ~
example.net. MR mr@example.net. ~
example.net. AFSDB 1 afsdb.example.net. ~
example.net. RP rp@example.net. rp.example.net. ~
example.net. RP rp2@example.net. . ~
example.net. X25 311061700956 ~
example.net. ISDN 150862028003217 ~
example.net. ISDN 150862028003217;004 ~
example.net. RT 10 relay.example.net. ~
example.net. NSAP 0x47.0005.80.005a00.0000.0001.e133.ffffff000162.00 ~
example.net. NSAP-PTR nsap.example.net. ~
example.net. PX 15 px1.example.net. px2.example.net. ~
example.net. GPOS '-98.6502';'19.283';'2134' ~
example.net. LOC 19 31 2.123 N 98 3 4 W 2000m 2m 4m 567m ~

EOF

# OK, test the server
../../../tcp/zoneserver -f mararc > /dev/null 2>&1 &
#../../../tcp/zoneserver -f mararc &
sleep 50
echo about to run fetchzone...
../../../tcp/fetchzone example.net 127.0.0.1
echo fetchzone done
echo
../../../tcp/getzone example.net 127.0.0.1
echo
sleep 50
kill $( ps auxw | grep -v grep | grep zoneserver | awk '{print $2}' ) \
	> /dev/null 2>&1
rm mararc
rm db.example.net

done

