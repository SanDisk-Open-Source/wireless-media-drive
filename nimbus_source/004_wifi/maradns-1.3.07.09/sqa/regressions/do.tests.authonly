#!/bin/sh

# This is a shell script that will do all of the sqa tests; this script
# will halt if any of the tests does not give the desired result

# These tests only work in Linux when run as root
if uname | grep Linux >/dev/null
then
    :
else
    echo These test work only under Linux
    exit 1
fi

if id | grep 'uid=0(root' >/dev/null
then
    :
else
    echo You must be root in order to perform the tests
    exit 1
fi

# So we don't have to rewrite all of the tests, copy over maradns.authonly
# to maradns
cp ../../server/maradns.authonly ../../server/maradns

# Tests specifically for the authonly version of MaraDNS
TESTS=""
TESTS=$TESTS"mararc_n_long_packet_ipv4 "
TESTS=$TESTS"mararc_n_ipv6_bind_address "
TESTS=$TESTS"mararc_n_tcp_convert_server "

# Tests to make sure most Mararc parameters work
TESTS=$TESTS"mararc_n_admin_acl "
TESTS=$TESTS"mararc_n_bind_address "
TESTS=$TESTS"mararc_n_bind_star_handling "
TESTS=$TESTS"mararc_n_chroot_dir "
TESTS=$TESTS"mararc_n_csv2_default_zonefile "
TESTS=$TESTS"mararc_n_csv2_synthip_list "
TESTS=$TESTS"mararc_n_csv2_tilde_handling "
TESTS=$TESTS"mararc_n_debug_msg_level "
TESTS=$TESTS"mararc_n_default_rrany_set "
# The following uses recursion
#TESTS=$TESTS"mararc_n_dns_port "
TESTS=$TESTS"mararc_n_dos_protection_level "
# Another tests that uses recursion
#TESTS=$TESTS"mararc_n_handle_noreply "
TESTS=$TESTS"mararc_n_hide_disclaimer "
TESTS=$TESTS"mararc_n_ipv4_bind_addresses "
TESTS=$TESTS"mararc_n_maradns_gid "
TESTS=$TESTS"mararc_n_maradns_uid "
TESTS=$TESTS"mararc_n_max_ar_chain "
TESTS=$TESTS"mararc_n_max_chain "
# These two tests use recursion
#TESTS=$TESTS"mararc_n_max_glueless_level "
#TESTS=$TESTS"mararc_n_max_queries_total "
TESTS=$TESTS"mararc_n_max_total "
# Three recursive-only tests
#TESTS=$TESTS"mararc_n_min_ttl "
#TESTS=$TESTS"mararc_n_min_ttl_cname "
#TESTS=$TESTS"mararc_n_min_visible_ttl "
# Two more tests that use recursion
#TESTS=$TESTS"mararc_n_recurse_delegation "
#TESTS=$TESTS"mararc_n_recursive_acl "
TESTS=$TESTS"mararc_n_remote_admin "
# Another recursive test
#TESTS=$TESTS"mararc_n_spammers "
TESTS=$TESTS"mararc_n_synth_soa_origin "
TESTS=$TESTS"mararc_n_synth_soa_serial "
TESTS=$TESTS"mararc_n_timestamp_type "
# Another tests that uses recursion
#TESTS=$TESTS"mararc_n_upstream_port "
TESTS=$TESTS"mararc_n_verbose_level "
# Another tests that uses recursion
#TESTS=$TESTS"mararc_n_verbose_query "

# Tests to make sure all Mararc dictionary variables work

TESTS=$TESTS"mararc_d_csv1 mararc_d_csv2 mararc_d_ipv4_alias "
TESTS=$TESTS"future "

# Tests to make sure all old known bugs have been fixed and stay fixed

# Valgrind is required to run some of these tests.  

TESTS=$TESTS"any_case askmara.bug def_zone_nx delegation_glue loc "
TESTS=$TESTS"long.chunk noat_parse_bug percent_parse_bug "
TESTS=$TESTS"star_handling_1 star_handling_2 star_handling_leak "
TESTS=$TESTS"truncation zoneserver_doc improper_rotation "

# These tests need to be revised to not use recursion
#TESTS=$TESTS"predator1 predator2 ptr_leak "

# Test to make sure synthetic ips in csv2 zone files correctly handle 
# MaraDNS bound to private and public IPs

# Note: The private_ips test changes the localhost IP when run.  Please
# only run this test on a machine where you can have the localhost IP
# temporarily disrupted (The localhost interface will briefly have the IPs
# 192.168.1.116, 172.16.116.70, 10.1.2.3, and 126.254.254.9)
TESTS=$TESTS"private_ips "

for test in $TESTS ; do
	cd $test
	sh ./do.test > output.test
	sleep 2
	if ! cmp output.success output.test > /dev/null 2>&1 ; then
		echo test $test failed
		exit 1
	else
		echo test $test succeeded
	fi
	cd ..
done

